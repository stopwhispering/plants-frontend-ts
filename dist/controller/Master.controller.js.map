{"version":3,"file":"Master.controller.js","names":["BaseController","Formatter","Navigation","Master","formatter","navigation","getInstance","mIdToFragment","popoverPopupImage","settingsDialogFilter","dialogNewPlant","dialogSort","onInit","onAfterRendering","oTable","byId","attachUpdateFinished","updateTableHeaderPlantsCount","bind","applyToFragment","sId","fn","fnInit","onListItemPress","oEvent","oPlant","getSource","getBindingContext","getObject","navToPlantDetails","id","onSearch","sQuery","getParameter","oPlantsTableBinding","getView","getBinding","aActiveFilters","getFilters","FilterType","Application","aNewFilters","aRelevantPaths","undefined","i","length","oActiveFilter","sPath","getPath","indexOf","push","aNestedFilters","Filter","FilterOperator","Contains","oFilterOr","filters","and","filter","_getDistinctTagsFromPlants","aPlants","aTagsAll","aTagObjects","tags","aTags","map","tag_obj","text","concat","Array","from","Set","onShowFilterDialog","oModelFilterValues","oComponent","getModel","oBinding","aSoilNames","getDistinctValues","setProperty","aPropagationTypes","aNurseriesSources","getData","PlantsCollection","sUrl","Util","getServiceUrl","oModelTaxonTree","JSONModel","oView","oDialog","Fragment","load","name","getId","controller","then","oControl","addDependent","setModel","open","_addSelectedFlag","aNodes","bSelected","that","forEach","oNode","oNodeInFilterDialog","selected","nodes","onSelectionChangeTaxonTree","aItems","oItem","getSelected","refresh","_getSelectedItems","iDeepestLevel","aSelected","aPlantIds","level","plant_ids","aInner","onConfirmFilters","aFilterItems","sFilterString","aFilters","aTagsInFilter","oFilterItem","aSplit","getKey","split","sOperator","sValue1","sValue2","oFilter","oTagsFilter","path","value1","comparator","aTagsPlant","aTagsInFilter_","bTagInFilter","some","item","includes","operator","EQ","aSelectedTreeItems","getSelectedItems","aTaxaTopLevel","getProperty","aSelectedPlantIds","aSpeciesFilterInner","ele","oSpeciesFilterOuter","setVisible","setText","oFilterHiddenPlants","_getHiddenPlantsFilter","sPreview","getSelectedKey","sHiddenPlantSettingsSelectedKey","onAdd","onAddSaveButton","sPlantName","getValue","MessageToast","show","isPlantNameInPlantsModel","saveNewPlant","close","onShowSortDialog","oViewSettingsDialog","handleSortDialogConfirm","oSortItem","bDescending","aSorters","Sorter","sort","onResetFilters","loadData","onHoverImage","oAvatar","evtDelegate","oBindingContext","oPopover","setBindingContext","openBy","onClickImagePopupImage","isOpen","onHoverAwayFromImage"],"sources":["../../src/controller/Master.controller.ts"],"sourcesContent":["import BaseController from \"plants/ui/controller/BaseController\"\r\nimport JSONModel from \"sap/ui/model/json/JSONModel\"\r\nimport Filter from \"sap/ui/model/Filter\"\r\nimport FilterOperator from \"sap/ui/model/FilterOperator\"\r\nimport FilterType from \"sap/ui/model/FilterType\"\r\nimport Sorter from \"sap/ui/model/Sorter\"\r\nimport Formatter from \"plants/ui/model/formatter\"\r\nimport MessageToast from \"sap/m/MessageToast\"\r\nimport * as Util from \"plants/ui/customClasses/Util\";\r\nimport Navigation from \"plants/ui/customClasses/Navigation\"\r\nimport Fragment from \"sap/ui/core/Fragment\"\r\nimport Popover from \"sap/m/Popover\"\r\nimport Control from \"sap/ui/core/Control\"\r\nimport Table from \"sap/m/Table\"\r\nimport ColumnListItem from \"sap/m/ColumnListItem\"\r\nimport Event from \"sap/ui/base/Event\"\r\nimport ListBinding from \"sap/ui/model/ListBinding\"\r\nimport ViewSettingsDialog from \"sap/m/ViewSettingsDialog\"\r\nimport StandardTreeItem from \"sap/m/StandardTreeItem\"\r\nimport { PTaxonTreeNode } from \"../definitions/SelectionFromBackend\"\r\nimport { LTaxonTreeNodeInFilterDialog } from \"../definitions/SelectionLocal\"\r\nimport SegmentedButton from \"sap/m/SegmentedButton\"\r\nimport Tree from \"sap/m/Tree\"\r\nimport OverflowToolbar from \"sap/m/OverflowToolbar\"\r\nimport Text from \"sap/m/Text\"\r\nimport Dialog from \"sap/m/Dialog\"\r\nimport Input from \"sap/m/Input\"\r\nimport Avatar from \"sap/m/Avatar\"\r\nimport { PPlant, PPlantTag } from \"../definitions/PlantsFromBackend\"\r\nimport { IdToFragmentMap } from \"../definitions/SharedLocal\"\r\n\r\n/**\r\n * @namespace plants.ui.controller\r\n */\r\nexport default class Master extends BaseController {\r\n\r\n\tpublic formatter: Formatter = new Formatter();\r\n\tprivate navigation = Navigation.getInstance();\r\n\tprivate oModelTaxonTree: JSONModel;\r\n\r\n\tprivate mIdToFragment = <IdToFragmentMap>{\r\n\t\tpopoverPopupImage: \"plants.ui.view.fragments.master.MasterImagePopover\",\r\n\t\tsettingsDialogFilter: 'plants.ui.view.fragments.master.MasterFilter',\r\n\t\tdialogNewPlant: 'plants.ui.view.fragments.master.MasterNewPlant',\r\n\t\tdialogSort: \"plants.ui.view.fragments.master.MasterSort\",\r\n\t}\r\n\r\n\tonInit() {\r\n\t\tsuper.onInit();\r\n\t}\r\n\r\n\tonAfterRendering() {\r\n\t\t// we need to update the plants display counter in table title \r\n\t\t// (when data was loaded, the view was not existing, yet)\r\n\t\tvar oTable = <Table>this.byId('plantsTable');\r\n\t\toTable.attachUpdateFinished(this.updateTableHeaderPlantsCount.bind(this));\r\n\t}\r\n\r\n\tprotected applyToFragment(sId: string, fn: Function, fnInit?: Function) {\r\n\t\t// to enable vs code to connect fragments with a controller, we may not mention\r\n\t\t// the Dialog/Popover ID in the base controller; therefore we have these names\r\n\t\t// hardcoded in each controller \r\n\t\tsuper.applyToFragment(sId, fn, fnInit, this.mIdToFragment);\r\n\t}\r\n\r\n\tonListItemPress(oEvent: Event) {\r\n\t\t// get selected plant\r\n\t\tvar oPlant = <PPlant>(<ColumnListItem>oEvent.getSource()).getBindingContext(\"plants\")!.getObject()\r\n\t\tthis.navigation.navToPlantDetails(oPlant.id!);\r\n\t}\r\n\r\n\tonSearch(oEvent: Event) {\r\n\t\t// filter logic: active AND (plant_name OR botanical_name)\r\n\t\t// therefore, we are going to nest the filters:\r\n\t\t// AND( filter_active, OR( filter_plant_name, filter_botanical_name))\r\n\t\tvar sQuery = oEvent.getParameter(\"query\");\r\n\r\n\t\t//check for  filter on active plants\r\n\t\tconst oPlantsTableBinding = <ListBinding>this.getView().byId(\"plantsTable\").getBinding('items')\r\n\t\tconst aActiveFilters = <Filter[]>oPlantsTableBinding.getFilters(FilterType.Application);\r\n\t\t// var aActiveFilters = oBinding.aApplicationFilters;\r\n\r\n\t\t//modify filters only on fields plant_name and botanical_name\r\n\t\t//leave active state filter (and possible others) as is\r\n\t\t//therefore collect other filters\r\n\t\tvar aNewFilters = [];\r\n\t\tconst aRelevantPaths: (string | undefined)[] = ['plant_name', 'botanical_name', undefined]\r\n\t\tfor (var i = 0; i < aActiveFilters.length; i++) {\r\n\t\t\tconst oActiveFilter = <Filter>aActiveFilters[i];\r\n\t\t\tconst sPath: string | undefined = oActiveFilter.getPath();\r\n\t\t\tif (!(aRelevantPaths.indexOf(sPath) > -1)) {\r\n\t\t\t\t// if (!aRelevantPaths.includes(sPath)) {\r\n\t\t\t\taNewFilters.push(aActiveFilters[i]);  //and\t\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// create new filters for plant_name and botanical_name (linked with OR)\r\n\t\tvar aNestedFilters = [new Filter(\"plant_name\", FilterOperator.Contains, sQuery),\r\n\t\tnew Filter(\"botanical_name\", FilterOperator.Contains, sQuery)];\r\n\t\tvar oFilterOr = new Filter({\r\n\t\t\tfilters: aNestedFilters,\r\n\t\t\tand: false\r\n\t\t});\r\n\t\taNewFilters.push(oFilterOr);\r\n\r\n\t\t//attach both filters (default: AND)\r\n\t\t//update the aggregation binding's filter\r\n\t\toPlantsTableBinding.filter(aNewFilters, FilterType.Application);\r\n\r\n\t\t// update count in table header\r\n\t\tthis.updateTableHeaderPlantsCount();\r\n\t}\r\n\r\n\tprivate _getDistinctTagsFromPlants(aPlants: PPlant[]) {\r\n\t\t// collect distinct tags assigned to any plant\r\n\t\tvar aTagsAll = <string[]>[];\r\n\t\tfor (var i = 0; i < aPlants.length; i++) {\r\n\t\t\tvar aTagObjects = <PPlantTag[]>aPlants[i].tags;\r\n\t\t\tif (!!aTagObjects.length) {\r\n\t\t\t\t// get tag texts from tag object list\r\n\t\t\t\tvar aTags = <string[]>aTagObjects.map(function (tag_obj) { return tag_obj.text; });\r\n\t\t\t\taTagsAll = aTagsAll.concat(aTags);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Array.from(new Set(aTagsAll));\r\n\t}\r\n\r\n\tonShowFilterDialog(oEvent: Event) {\r\n\t\t// triggered by show-filters-dialog button; displays filter settings dialog\r\n\r\n\t\t// (re-)fill filter values model with distinct values for tags and soil names\r\n\t\tvar oModelFilterValues = this.oComponent.getModel('filterValues');\r\n\r\n\t\t// soil names\r\n\t\tvar oBinding = <ListBinding>this.byId('plantsTable').getBinding('items');\r\n\t\tvar aSoilNames = oBinding.getDistinctValues('current_soil/soil_name');\r\n\t\toModelFilterValues.setProperty('/soilNames', aSoilNames);\r\n\r\n\t\t// propagation types\r\n\t\tvar aPropagationTypes = oBinding.getDistinctValues('propagation_type');\r\n\t\toModelFilterValues.setProperty('/propagationTypes', aPropagationTypes);\r\n\r\n\t\t// nursery/source\r\n\t\tvar aNurseriesSources = oBinding.getDistinctValues('nursery_source');\r\n\t\toModelFilterValues.setProperty('/nurseriesSources', aNurseriesSources);\r\n\r\n\t\t// tags is a list for each plant, so we can't use getDistinctValues on the binding here\r\n\t\tvar aPlants = this.oComponent.getModel('plants').getData().PlantsCollection;\r\n\t\tvar aTags = this._getDistinctTagsFromPlants(aPlants);\r\n\t\toModelFilterValues.setProperty('/tags', aTags);\r\n\r\n\t\t// update taxon tree values from backend\r\n\t\tvar sUrl = Util.getServiceUrl('selection_data');\r\n\t\tif (!this.oModelTaxonTree) {\r\n\t\t\tthis.oModelTaxonTree = new JSONModel(sUrl);\r\n\t\t}\r\n\r\n\t\tvar oView = this.getView();\r\n\t\tconst oDialog = <Dialog>this.byId('settingsDialogFilter');\r\n\t\tif (!oDialog) {\r\n\t\t\tFragment.load({\r\n\t\t\t\tname: 'plants.ui.view.fragments.master.MasterFilter',\r\n\t\t\t\tid: oView.getId(),\r\n\t\t\t\tcontroller: this\r\n\t\t\t}).then((oControl: Control | Control[]) => {\r\n\t\t\t\tconst oDialog: Dialog = oControl as Dialog;\r\n\t\t\t\toView.addDependent(oDialog);\r\n\t\t\t\toDialog.setModel(this.oModelTaxonTree, 'selection');\r\n\t\t\t\toDialog.open();\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\toDialog.setModel(this.oModelTaxonTree, 'selection');\r\n\t\t\toDialog.open();\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\tprivate _addSelectedFlag(aNodes: PTaxonTreeNode[], bSelected: boolean) {\r\n\t\tconst that = this;\r\n\t\taNodes.forEach(function (oNode: PTaxonTreeNode) {\r\n\t\t\tlet oNodeInFilterDialog: LTaxonTreeNodeInFilterDialog = <LTaxonTreeNodeInFilterDialog>oNode;\r\n\t\t\toNodeInFilterDialog.selected = bSelected;\r\n\t\t\tif (!!oNodeInFilterDialog.nodes && oNodeInFilterDialog.nodes.length > 0) {\r\n\t\t\t\tthat._addSelectedFlag(oNodeInFilterDialog.nodes, bSelected);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpublic onSelectionChangeTaxonTree(oEvent: Event) {\r\n\t\tvar aItems = oEvent.getParameter(\"listItems\");\r\n\t\tlet that = this;\r\n\t\taItems.forEach(function (oItem: StandardTreeItem) {\r\n\t\t\tvar oNode = <PTaxonTreeNode>oItem.getBindingContext('selection')!.getObject();\r\n\t\t\tvar bSelected = oItem.getSelected();\r\n\t\t\tif (oNode.nodes) {\r\n\t\t\t\tthat._addSelectedFlag(oNode.nodes, bSelected);\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.oModelTaxonTree.refresh();\r\n\t}\r\n\r\n\tprivate _getSelectedItems(aNodes: LTaxonTreeNodeInFilterDialog[], iDeepestLevel: int): [LTaxonTreeNodeInFilterDialog[], int[]] {\r\n\t\t// find selected nodes on deepest levels and collect their plant ids\r\n\t\t// recursive!\r\n\t\tlet aSelected: LTaxonTreeNodeInFilterDialog[] = [];\r\n\t\tlet aPlantIds: int[] = [];\r\n\t\tconst that = this;\r\n\t\taNodes.forEach(function (oNode: LTaxonTreeNodeInFilterDialog) {\r\n\t\t\tif (oNode.level === iDeepestLevel && oNode.selected) {\r\n\t\t\t\taSelected.push(oNode);\r\n\t\t\t\tif (oNode.plant_ids)\r\n\t\t\t\t\taPlantIds = aPlantIds.concat(oNode.plant_ids);\r\n\t\t\t} else if (oNode.nodes && oNode.nodes.length > 0) {\r\n\t\t\t\tvar aInner = that._getSelectedItems(oNode.nodes, iDeepestLevel);\r\n\t\t\t\tif (aInner[0].length > 0) {\r\n\t\t\t\t\taSelected = aSelected.concat(aInner[0]);\r\n\t\t\t\t}\r\n\t\t\t\tif (aInner[1].length > 0) {\r\n\t\t\t\t\taPlantIds = aPlantIds.concat(aInner[1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, this);\r\n\t\treturn [aSelected, aPlantIds];\r\n\t}\r\n\r\n\tpublic onConfirmFilters(oEvent: Event) {\r\n\t\tconst oTable = this.byId(\"plantsTable\");\r\n\t\tconst aFilterItems = oEvent.getParameter(\"filterItems\");\r\n\t\tconst sFilterString = oEvent.getParameter(\"filterString\");\r\n\t\t// const mParams = oEvent.getParameters(),\r\n\t\tconst oBinding = <ListBinding>oTable.getBinding(\"items\");\r\n\t\tconst aFilters = [];\r\n\r\n\t\t//get currently active filters on plant/botanical name (set via search function)\r\n\t\t//and add them to the new filter list\r\n\t\tconst aRelevantPaths: (string | undefined)[] = ['plant_name', 'botanical_name']\r\n\t\tconst aActiveFilters = <Filter[]>oBinding.getFilters('Application');;\r\n\t\tfor (var i = 0; i < aActiveFilters.length; i++) {\r\n\t\t\t// if (aRelevantPaths.includes(aActiveFilters[i]['sPath'])\r\n\t\t\tconst oActiveFilter = <Filter>aActiveFilters[i];\r\n\t\t\tconst sPath: string | undefined = oActiveFilter.getPath();\r\n\t\t\tif (aRelevantPaths.indexOf(sPath) > -1) {\r\n\t\t\t\taFilters.push(aActiveFilters[i]);  //and\t\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// filters from the settings dialog filter tab:\r\n\t\t// see fragment for the ___ convention to make this as easy as below\r\n\t\t// we have one exceptional case - tags: a plant has 0..n tags and if\r\n\t\t// at least one of them is selected as filter, the plant should be shown\r\n\t\t// the ordinary filter operators do not cover that scenario, so we will\r\n\t\t// generate a custom filter\r\n\t\t// here, we collect the tags for the tags filter and collect the other\r\n\t\t// filters directly\r\n\t\tlet aTagsInFilter = <string[]>[];\r\n\t\taFilterItems.forEach(function (oFilterItem: any) {\r\n\t\t\tvar aSplit = oFilterItem.getKey().split(\"___\"),\r\n\t\t\t\tsPath = aSplit[0],\r\n\t\t\t\tsOperator = aSplit[1],\r\n\t\t\t\tsValue1 = aSplit[2],\r\n\t\t\t\tsValue2 = aSplit[3];\r\n\t\t\tswitch (sPath) {\r\n\t\t\t\tcase 'tags/text':\r\n\t\t\t\t\taTagsInFilter.push(sValue1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tvar oFilter = new Filter(sPath, sOperator, sValue1, sValue2);\r\n\t\t\t\t\taFilters.push(oFilter);\r\n\t\t\t\t\t// make empty string work for undefined, too\r\n\t\t\t\t\tif (sValue1 == '') {\r\n\t\t\t\t\t\toFilter = new Filter(sPath, sOperator, undefined, sValue2);\r\n\t\t\t\t\t\taFilters.push(oFilter);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// generate the tags custom filter\r\n\t\tif (aTagsInFilter.length > 0) {\r\n\t\t\tvar oTagsFilter = new Filter({\r\n\t\t\t\tpath: 'tags',\r\n\t\t\t\tvalue1: aTagsInFilter,\r\n\t\t\t\tcomparator(aTagsPlant, aTagsInFilter_) {\r\n\t\t\t\t\tvar bTagInFilter = aTagsPlant.some(function (item: any) {\r\n\t\t\t\t\t\treturn aTagsInFilter_.includes(item.text);\r\n\t\t\t\t\t});\r\n\t\t\t\t\t// Comparator function returns 0, 1 or -1 as the result, which means \r\n\t\t\t\t\t// equal, larger than or less than; as we're using EQ, we will \r\n\t\t\t\t\t// return 0 if filter is matched, otherwise something else\r\n\t\t\t\t\treturn bTagInFilter ? 0 : -1;\r\n\t\t\t\t},\r\n\t\t\t\toperator: FilterOperator.EQ\r\n\t\t\t});\r\n\t\t\taFilters.push(oTagsFilter);\r\n\t\t}\r\n\r\n\t\t// taxonTree filters\r\n\t\tvar iDeepestLevel = 2;\r\n\t\tconst aSelectedTreeItems = <StandardTreeItem[]>(<Tree>this.byId('taxonTree')).getSelectedItems();\r\n\t\tif (aSelectedTreeItems.length > 0) {\r\n\t\t\t// we can't use the selectedItems as they only cover the expanded nodes' leaves; we need to use the model\r\n\t\t\t// to get the selected species (i.e. leaves, level 2)\r\n\t\t\tvar aTaxaTopLevel = (<JSONModel>this.oModelTaxonTree).getProperty('/Selection/TaxonTree');\r\n\t\t\tvar aSelected = this._getSelectedItems(aTaxaTopLevel, iDeepestLevel);\r\n\t\t\tvar aSelectedPlantIds = aSelected[1];\r\n\t\t\tvar aSpeciesFilterInner = aSelectedPlantIds.map(ele => new Filter('id', FilterOperator.EQ, ele));\r\n\t\t\tvar oSpeciesFilterOuter = new Filter({\r\n\t\t\t\tfilters: aSpeciesFilterInner,\r\n\t\t\t\tand: false\r\n\t\t\t});\r\n\t\t\taFilters.push(oSpeciesFilterOuter);\r\n\r\n\t\t}\r\n\r\n\t\t// update filter bar\r\n\t\t(<OverflowToolbar>this.byId(\"tableFilterBar\")).setVisible(aFilters.length > 0);\r\n\t\t(<Text>this.byId(\"tableFilterLabel\")).setText(sFilterString);\r\n\r\n\t\t// filter on hidden tag: this is set in the settings dialog's settings tab\r\n\t\t// via segmented button\r\n\t\t// after updating filter bar as this filter is a defaule one\r\n\t\tvar oFilterHiddenPlants = this._getHiddenPlantsFilter();\r\n\t\tif (oFilterHiddenPlants) {\r\n\t\t\taFilters.push(oFilterHiddenPlants);\r\n\t\t}\r\n\r\n\t\t// apply filter settings\r\n\t\toBinding.filter(aFilters);\r\n\t\tthis.updateTableHeaderPlantsCount();\r\n\r\n\t\t// switch preview image (favourite or latest)\r\n\t\tvar sPreview = (<SegmentedButton>this.byId('sbtnPreviewImage')).getSelectedKey() || 'favourite_image';\r\n\t\tthis.oComponent.getModel('status').setProperty('/preview_image', sPreview);\r\n\t}\r\n\r\n\tprivate _getHiddenPlantsFilter() {\r\n\t\t// triggered by filter/settings dialog confirm handler\r\n\t\t// generates a filter on plant's active property\r\n\t\tvar sHiddenPlantSettingsSelectedKey = (<SegmentedButton>this.byId('sbtnHiddenPlants')).getSelectedKey();\r\n\t\tswitch (sHiddenPlantSettingsSelectedKey) {\r\n\t\t\tcase 'both':\r\n\t\t\t\treturn undefined;\r\n\t\t\tcase 'only_hidden':\r\n\t\t\t\treturn new Filter(\"active\", FilterOperator.EQ, false);\r\n\t\t\tdefault:  // only_active or undefined (settings tab not initialized, set)\r\n\t\t\t\treturn new Filter(\"active\", FilterOperator.EQ, true);\r\n\t\t}\r\n\t}\r\n\r\n\tonAdd(oEvent: Event) {\r\n\t\tvar oView = this.getView();\r\n\t\tconst oDialog = <Dialog>this.byId('dialogNewPlant');\r\n\t\tif (!oDialog) {\r\n\t\t\tFragment.load({\r\n\t\t\t\tname: this.mIdToFragment[\"dialogNewPlant\"],\r\n\t\t\t\tid: oView.getId(),\r\n\t\t\t\tcontroller: this\r\n\t\t\t}).then((oControl: Control | Control[]) => {\r\n\t\t\t\t(<Dialog>oControl).open();\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\toDialog.open();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic onAddSaveButton(oEvent: Event) {\r\n\t\tvar sPlantName = (<Input>this.byId(\"inputCreateNewPlantName\")).getValue();\r\n\t\t//check and not empty\r\n\t\tif (sPlantName === '') {\r\n\t\t\tMessageToast.show('Empty not allowed.');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (sPlantName.includes('/')) {\r\n\t\t\tMessageToast.show('Forward slash not allowed.');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//check if new\r\n\t\tif (this.isPlantNameInPlantsModel(sPlantName)) {\r\n\t\t\tMessageToast.show('Plant Name already exists.');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.saveNewPlant({\r\n\t\t\t'plant_name': sPlantName,\r\n\t\t\t'active': true,\r\n\t\t\t'descendant_plants_all': [],  //auto-derived in backend\r\n\t\t\t'sibling_plants': [],  //auto-derived in backend\r\n\t\t\t'same_taxon_plants': [],  //auto-derived in backend\r\n\t\t\t'tags': [],\r\n\t\t});\r\n\t\tthis.applyToFragment('dialogNewPlant', (oDialog: Dialog) => oDialog.close());\r\n\t}\r\n\r\n\tonShowSortDialog(oEvent: Event) {\r\n\t\tthis.applyToFragment('dialogSort', (oViewSettingsDialog: ViewSettingsDialog) => oViewSettingsDialog.open());\r\n\t}\r\n\r\n\thandleSortDialogConfirm(oEvent: Event) {\r\n\t\tconst oTable = this.byId(\"plantsTable\");\r\n\t\tconst oSortItem = oEvent.getParameter('sortItem');\r\n\t\tconst bDescending = oEvent.getParameter('sortDescending');\r\n\t\tconst oBinding = <ListBinding>oTable.getBinding(\"items\");\r\n\t\tlet sPath;\r\n\t\tconst aSorters = [];\r\n\r\n\t\tsPath = oSortItem.getKey();\r\n\t\taSorters.push(new Sorter(sPath, bDescending));\r\n\r\n\t\t// apply the selected sort and group settings\r\n\t\toBinding.sort(aSorters);\r\n\t}\r\n\r\n\tpublic onResetFilters(oEvent: Event) {\r\n\t\tvar sUrl = Util.getServiceUrl('selection_data');\r\n\t\tthis.oModelTaxonTree.loadData(sUrl);\r\n\t}\r\n\r\n\tpublic onHoverImage(oAvatar: Avatar, evtDelegate: JQuery.Event) {\r\n\t\t// apply _onHoverImageShow function to popover\r\n\t\tvar oBindingContext = oAvatar.getBindingContext('plants')!;\r\n\t\tvar oView = this.getView();\r\n\t\tconst oPopover = <Popover>this.byId('popoverPopupImage');\r\n\t\tif (!oPopover) {\r\n\t\t\tFragment.load({\r\n\t\t\t\tname: this.mIdToFragment[\"popoverPopupImage\"],\r\n\t\t\t\tid: oView.getId(),\r\n\t\t\t\tcontroller: this\r\n\t\t\t}).then((oControl: Control | Control[]) => {\r\n\t\t\t\tconst oPopover: Popover = oControl as Popover;\r\n\t\t\t\toView.addDependent(oPopover);\r\n\t\t\t\toPopover.setBindingContext(oBindingContext, 'plants');\r\n\t\t\t\toPopover.openBy(oAvatar, true);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\toPopover.setBindingContext(oBindingContext, 'plants');\r\n\t\t\toPopover.openBy(oAvatar, true);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic onClickImagePopupImage(oEvent: Event) {\r\n\t\tthis.applyToFragment('popoverPopupImage', (oPopover: Popover) => { if (oPopover.isOpen()) { oPopover.close() } });\r\n\t}\r\n\r\n\tpublic onHoverAwayFromImage(oAvatar: Avatar, evtDelegate: JQuery.Event) {\r\n\t\tthis.applyToFragment('popoverPopupImage', (oPopover: Popover) => { if (oPopover.isOpen()) { oPopover.close() } });\r\n\t}\r\n\r\n}"],"mappings":"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"}