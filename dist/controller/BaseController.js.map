{"version":3,"file":"BaseController.js","names":["MessageUtil","ModelsHelper","Navigation","BaseController","Controller","savingPlants","savingImages","savingTaxa","savingEvents","savingProperties","savingPropertiesTaxa","onInit","oComponent","getOwnerComponent","oRouter","getRouter","_getFragment","sId","getView","byId","applyToFragment","fn","fnInit","mIdToFragment","oView","Fragment","load","name","id","getId","controller","then","oFragment","addDependent","getModifiedPlants","oModelPlants","getModel","dDataPlants","getData","aModifiedPlants","aOriginalPlants","oPlantsDataClone","i","length","Util","dictsAreEqual","oModified","getClonedObject","parent_plant","parent_plant_pollen","push","getModifiedTaxa","oModelTaxon","dDataTaxon","TaxaDict","dDataTaxonOriginal","oTaxonDataClone","keys_s","Object","keys","map","k","parseInt","aModifiedTaxonList","forEach","key","_getModifiedEvents","oModelEvents","oDataEvents","PlantsEventsDict","oDataEventsClone","oEventsDataClone","oModifiedEventsDict","keys_clones","keys_clone","objectsEqualManually","_getPropertiesSansTaxa","dProperties_","dProperties","iPlantId","oTaxonPropertiesInCategories","j","categories","oCategory","properties","oProperty","foundTaxonProperty","property_values","find","element","iIndex","indexOf","splice","foundPlantProperty","_getModifiedPropertiesPlants","oModelProperties","dDataProperties","propertiesPlants","dDataPropertiesCleaned","dDataPropertiesOriginal","oPropertiesDataClone","dModifiedPropertiesDict","keys_clone_s","_getModifiedPropertiesTaxa","oDataPropertiesTaxon","oPropertiesTaxon","propertiesTaxon","oPropertiesTaxonOriginal","oPropertiesTaxonDataClone","oModifiedPropertiesDict","getModifiedImages","oImages","imagesRegistry","oImagesClone","imagesRegistryClone","aModifiedImages","path","savePlantsAndImages","startBusyDialog","aModifiedTaxa","dModifiedEvents","dModifiedPropertiesPlants","dModifiedPropertiesTaxa","MessageToast","show","stopBusyDialog","dPayloadPlants","$","ajax","url","getServiceUrl","type","contentType","data","JSON","stringify","context","done","_onAjaxSuccessSave","fail","getInstance","onReceiveErrorGeneric","bind","dPayloadImages","aModifiedTaxaSave","m","occurrenceImages","dPayloadTaxa","dPayloadEvents","dPayloadProperties","dPayloadPropertiesTaxa","saveNewPlant","oPlant","plant_name","that","oData","sStatus","oReturnData","oPlantSaved","plants","aPlants","getProperty","iPlantsCount","updateBindings","oPlantClone","PlantsCollection","navToPlantDetails","always","isPlantNameInPlantsModel","sPlantName","ele","undefined","getPlantById","plantId","getPlantByName","plantName","plant","onAjaxSimpleSuccess","oConfirmation","message","addMessageFromBackend","oMsg","resource","dDataEvents","propertiesPlantsWithoutTaxa","oModelPropertiesTaxa","dDataPropertiesTaxa","updateTableHeaderPlantsCount","iPlants","getBinding","getLength","sTitle","setText","handleErrorMessageBox","sText","bCompact","closest","MessageBox","error","styleClass","onCancelDialog","oEvent","oControl","getSource","getParent","Dialog","Popover","ViewSettingsDialog","close","confirmDeleteImage","oImage","sAction","oPayload","filename","onAjaxDeletedImagesSuccess","aDeletedImages","cbCallback","textStats","jqXHR","oImagesModel","oUntaggedImagesModel","aDataImages","ImagesCollection","aDataUntagged","image","iPosImages","refresh","onReceiveSuccessGeneric","addPhotosToRegistry","aPhotos","photo","resetImagesCurrentPlant","plant_id","aPhotosArr","entries","filter","t","p","setProperty","getSuggestionItem","rootKey","suggestions","suggestion","s"],"sources":["../../src/controller/BaseController.ts"],"sourcesContent":["//implements a set of functions that are reused by its subclasses (e.g. back button behaviour)\r\n//abstract controller -> no \".controller.\" in the filename --> prevents usage in views, too\r\nimport Controller from \"sap/ui/core/mvc/Controller\"\r\nimport MessageBox from \"sap/m/MessageBox\"\r\nimport MessageUtil from \"plants/ui/customClasses/MessageUtil\"\r\nimport * as Util from \"plants/ui/customClasses/Util\";\r\nimport MessageToast from \"sap/m/MessageToast\"\r\nimport ModelsHelper from \"plants/ui/model/ModelsHelper\"\r\nimport Fragment from \"sap/ui/core/Fragment\"\r\nimport Navigation from \"plants/ui/customClasses/Navigation\"\r\nimport Dialog from \"sap/m/Dialog\";\r\nimport Component from \"../Component\";\r\nimport Router from \"sap/ui/core/routing/Router\";\r\nimport { Taxon, TaxonMap } from \"../definitions/entities\";\r\nimport { ImageMap, PImage } from \"../definitions/image_entities\";\r\nimport Control from \"sap/ui/core/Control\";\r\nimport { CategoryToPropertiesInCategoryMap, PlantIdToPropertyCollectionMap, PPropertyCollectionPlant, PropertiesTaxonModelData } from \"../definitions/property_entities\";\r\nimport { LPropagationType, PPlant, PResultsPlantsUpdate } from \"../definitions/plant_entities\";\r\nimport ListBinding from \"sap/ui/model/ListBinding\";\r\nimport Label from \"sap/ui/webc/main/Label\";\r\nimport { IdToFragmentMap } from \"../definitions/shared_types\";\r\nimport { PlantIdToEventsMap } from \"../definitions/EventsLocal\";\r\nimport { PConfirmation, PMessage } from \"../definitions/MessagesFromBackend\";\r\nimport Event from \"sap/ui/base/Event\";\r\nimport Popover from \"sap/m/Popover\";\r\nimport ViewSettingsDialog from \"sap/m/ViewSettingsDialog\";\r\n\r\n/**\r\n * @namespace plants.ui.controller\r\n */\r\nexport default class BaseController extends Controller {\r\n\r\n\tModelsHelper: ModelsHelper\r\n\r\n\tprotected oComponent: Component;\r\n\tprotected oRouter: Router;\r\n\tprivate savingPlants = false;\r\n\tprivate savingImages = false;\r\n\tprivate savingTaxa = false;\r\n\tprivate savingEvents = false;\r\n\tprivate savingProperties = false;\r\n\tprivate savingPropertiesTaxa = false;\r\n\r\n\tpublic onInit() {\r\n\t\tthis.oComponent = <Component>this.getOwnerComponent();\r\n\t\tthis.oRouter = this.oComponent.getRouter();\r\n\t}\r\n\r\n\t_getFragment(sId: string) {\r\n\t\t//returns already-instantiated fragment by sId\r\n\t\t//if not sure wether instantiated, use applyToFragment\r\n\t\treturn this.getView().byId(sId);\r\n\t}\r\n\r\n\tprotected applyToFragment(sId: string, fn: Function, fnInit?: Function, mIdToFragment?: IdToFragmentMap) {\r\n\t\t//create fragment singleton and apply supplied function to it (e.g. open, close)\r\n\t\t// if stuff needs to be done only once, supply fnInit wher^^e first usage happens\r\n\r\n\t\t//example usages:\r\n\t\t// this.applyToFragment('dialogDoSomething', _onOpenAddTagDialog.bind(this));\r\n\t\t// this.applyToFragment('dialogDoSomething', (o)=>o.close());\r\n\t\t// this.applyToFragment('dialogDoSomething', (o)=>{doA; doB; doC;}, fnMyInit);\r\n\r\n\t\t//fragment id to fragment file path\r\n\t\tif (!mIdToFragment) {\r\n\t\t\tmIdToFragment = <IdToFragmentMap>{\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar oView = this.getView();\r\n\t\tif (oView.byId(sId)) {\r\n\t\t\tfn(oView.byId(sId));\r\n\t\t} else {\r\n\t\t\tFragment.load({\r\n\t\t\t\tname: mIdToFragment[sId],\r\n\t\t\t\tid: oView.getId(),\r\n\t\t\t\tcontroller: this\r\n\t\t\t}).then(function (oFragment: Control | Control[]) {\r\n\t\t\t\toView.addDependent(<Control>oFragment);\r\n\t\t\t\tif (fnInit) {\r\n\t\t\t\t\tfnInit(oFragment);\r\n\t\t\t\t}\r\n\t\t\t\tfn(oFragment);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tgetModifiedPlants() {\r\n\t\t// get plants model and identify modified items\r\n\t\tvar oModelPlants = this.oComponent.getModel('plants');\r\n\t\tvar dDataPlants = oModelPlants.getData();\r\n\t\tvar aModifiedPlants = [];\r\n\t\tvar aOriginalPlants = this.oComponent.oPlantsDataClone['PlantsCollection'];\r\n\t\tfor (var i = 0; i < dDataPlants['PlantsCollection'].length; i++) {\r\n\t\t\tif (!Util.dictsAreEqual(dDataPlants['PlantsCollection'][i],\r\n\t\t\t\taOriginalPlants[i])) {\r\n\t\t\t\t// we need to check if our modified object differs only in structure of parent plant but still\r\n\t\t\t\t// has same parent pland id or none\r\n\t\t\t\tvar oModified = Util.getClonedObject(dDataPlants['PlantsCollection'][i]);\r\n\t\t\t\tif (!!oModified.parent_plant && !oModified.parent_plant.id) {\r\n\t\t\t\t\toModified.parent_plant = null;\r\n\t\t\t\t}\r\n\t\t\t\tif (!!oModified.parent_plant_pollen && !oModified.parent_plant_pollen.id) {\r\n\t\t\t\t\toModified.parent_plant_pollen = null;\r\n\t\t\t\t}\r\n\t\t\t\tif (!Util.dictsAreEqual(oModified, aOriginalPlants[i])) {\r\n\r\n\t\t\t\t\taModifiedPlants.push(dDataPlants['PlantsCollection'][i]);\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn aModifiedPlants;\r\n\t}\r\n\r\n\tpublic getModifiedTaxa(): Taxon[] {\r\n\t\t// get taxon model and identify modified items\r\n\t\t// difference to plants and images: data is stored with key in a dictionary, not in an array\r\n\t\t// we identify the modified sub-dictionaries and return a list of these\r\n\t\t// note: we don't check whether there's a new taxon as after adding a taxon, it is added\r\n\t\t//\t     to the clone as well\r\n\t\t// we don't check for deleted taxa as there's no function for doing this in frontend\r\n\t\tvar oModelTaxon = this.oComponent.getModel('taxon');\r\n\t\tvar dDataTaxon: TaxonMap = oModelTaxon.getData().TaxaDict;\r\n\t\tvar dDataTaxonOriginal: TaxonMap = this.oComponent.oTaxonDataClone['TaxaDict'];\r\n\r\n\t\t//get taxon id's, i.e. keys of the taxa dict\r\n\t\tvar keys_s = <string[]>Object.keys(dDataTaxonOriginal);\r\n\t\tvar keys = <int[]>keys_s.map(k => parseInt(k));\r\n\r\n\t\t//for each key, check if it's value is different from the clone\r\n\t\tvar aModifiedTaxonList: Taxon[] = [];\r\n\r\n\t\tkeys.forEach(function (key) {\r\n\t\t\tif (!Util.dictsAreEqual(dDataTaxonOriginal[key],\r\n\t\t\t\tdDataTaxon[key])) {\r\n\t\t\t\taModifiedTaxonList.push(dDataTaxon[key]);\r\n\t\t\t}\r\n\t\t}, this);\r\n\r\n\t\treturn aModifiedTaxonList;\r\n\t}\r\n\r\n\tprivate _getModifiedEvents(): PlantIdToEventsMap {\r\n\t\t// returns a dict with events for those plants where at least one event has been modified, added, or deleted\r\n\t\tconst oModelEvents = this.oComponent.getModel('events');\r\n\t\tconst oDataEvents: PlantIdToEventsMap = oModelEvents.getData().PlantsEventsDict;\r\n\t\tconst oDataEventsClone: PlantIdToEventsMap = this.oComponent.oEventsDataClone;\r\n\r\n\t\t//get plants for which we have events in the original dataset\r\n\t\t//then, for each of them, check whether events have been changed\r\n\t\tlet oModifiedEventsDict: PlantIdToEventsMap = {};\r\n\t\tconst keys_clones = Object.keys(oDataEventsClone);\r\n\t\tconst keys_clone = <int[]>keys_clones.map(k => parseInt(k));\r\n\t\tkeys_clone.forEach(function (key) {\r\n\t\t\t// if(!Util.arraysAreEqual(dDataEventsClone[key],\r\n\t\t\tif (!Util.objectsEqualManually(oDataEventsClone[key],\r\n\t\t\t\toDataEvents[key])) {\r\n\t\t\t\toModifiedEventsDict[key] = oDataEvents[key];\r\n\t\t\t}\r\n\t\t}, this);\r\n\r\n\t\t//added plants\r\n\t\tconst keys_s = Object.keys(oDataEvents);\r\n\t\tconst keys = <int[]>keys_s.map(k => parseInt(k));\r\n\t\tkeys.forEach(function (key) {\r\n\t\t\tif (!oDataEventsClone[key]) {\r\n\t\t\t\toModifiedEventsDict[key] = oDataEvents[key];\r\n\t\t\t}\r\n\t\t}, this);\r\n\r\n\t\treturn oModifiedEventsDict;\r\n\t}\r\n\r\n\tprivate _getPropertiesSansTaxa(dProperties_: PlantIdToPropertyCollectionMap): PlantIdToPropertyCollectionMap {\r\n\t\tvar dProperties: PlantIdToPropertyCollectionMap = Util.getClonedObject(dProperties_);\r\n\t\tfor (var i = 0; i < Object.keys(dProperties).length; i++) {\r\n\t\t\tconst iPlantId: int = parseInt(Object.keys(dProperties)[i]);\r\n\t\t\tvar oTaxonPropertiesInCategories: PPropertyCollectionPlant = dProperties[iPlantId] as unknown as PPropertyCollectionPlant;\r\n\r\n\t\t\tfor (var j = 0; j < oTaxonPropertiesInCategories.categories.length; j++) {\r\n\t\t\t\tvar oCategory = oTaxonPropertiesInCategories.categories[j];\r\n\r\n\t\t\t\t// reverse-loop as we might need to delete a property (name) node within the loop\r\n\t\t\t\tfor (var k = oCategory.properties.length - 1; k >= 0; k--) {\r\n\t\t\t\t\tvar oProperty = oCategory.properties[k];\r\n\r\n\t\t\t\t\t// remove taxon property value\r\n\t\t\t\t\tvar foundTaxonProperty = oProperty.property_values.find(element => element[\"type\"] === \"taxon\");\r\n\t\t\t\t\tif (foundTaxonProperty) {\r\n\t\t\t\t\t\tvar iIndex = oProperty.property_values.indexOf(foundTaxonProperty);\r\n\t\t\t\t\t\toProperty.property_values.splice(iIndex, 1);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// if there's no plant property value, just remove the whole property name noe\r\n\t\t\t\t\tvar foundPlantProperty = oProperty.property_values.find(element => element[\"type\"] === \"plant\");\r\n\t\t\t\t\tif (!foundPlantProperty)\r\n\t\t\t\t\t\toCategory.properties.splice(k, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn dProperties;\r\n\t}\r\n\r\n\tprivate _getModifiedPropertiesPlants() {\r\n\t\t// returns a dict with properties for those plants where at least one property has been modified, added, or deleted\r\n\t\t// for these plants, properties are supplied completely; modifications are then identified in backend\r\n\t\tconst oModelProperties = this.oComponent.getModel('properties');\r\n\t\tconst dDataProperties: PlantIdToPropertyCollectionMap = oModelProperties.getData().propertiesPlants;\r\n\t\t// clean up the properties model data (returns a clone, not the original object!)\r\n\t\tconst dDataPropertiesCleaned: PlantIdToPropertyCollectionMap = this._getPropertiesSansTaxa(dDataProperties);\r\n\t\tconst dDataPropertiesOriginal: PlantIdToPropertyCollectionMap = this.oComponent.oPropertiesDataClone;\r\n\r\n\t\t// get plants for which we have properties in the original dataset\r\n\t\t// then, for each of them, check whether properties have been changed\r\n\t\tlet dModifiedPropertiesDict: PlantIdToPropertyCollectionMap = {};\r\n\t\tconst keys_clone_s = Object.keys(dDataPropertiesOriginal);\r\n\t\tconst keys_clone = <int[]>keys_clone_s.map(k => parseInt(k));\r\n\t\tkeys_clone.forEach(function (key) {\r\n\t\t\t// loop at plants\r\n\t\t\tif (!Util.objectsEqualManually(dDataPropertiesOriginal[key],\r\n\t\t\t\tdDataPropertiesCleaned[key])) {\r\n\t\t\t\tdModifiedPropertiesDict[key] = dDataPropertiesCleaned[key];\r\n\t\t\t}\r\n\t\t}, this);\r\n\r\n\t\treturn dModifiedPropertiesDict;\r\n\t}\r\n\r\n\tprivate _getModifiedPropertiesTaxa(): CategoryToPropertiesInCategoryMap {\r\n\t\tconst oModelProperties = this.oComponent.getModel('propertiesTaxa');\r\n\t\tconst oDataPropertiesTaxon: PropertiesTaxonModelData = oModelProperties.getData();\r\n\t\tconst oPropertiesTaxon: CategoryToPropertiesInCategoryMap = oDataPropertiesTaxon.propertiesTaxon;\r\n\t\tconst oPropertiesTaxonOriginal: CategoryToPropertiesInCategoryMap = this.oComponent.oPropertiesTaxonDataClone;\r\n\r\n\t\tif (!oPropertiesTaxonOriginal) {\r\n\t\t\treturn {};\r\n\t\t}\r\n\r\n\t\t// get taxa for which we have properties in the original dataset\r\n\t\t// then, for each of them, check whether properties have been changed\r\n\t\tvar oModifiedPropertiesDict: CategoryToPropertiesInCategoryMap = {};\r\n\t\tconst keys_clone_s = Object.keys(oPropertiesTaxonOriginal);\r\n\t\tconst keys_clone = keys_clone_s.map(key => parseInt(key));\r\n\t\tkeys_clone.forEach(function (key) {\r\n\t\t\t// loop at plants\r\n\t\t\tif (!Util.objectsEqualManually(oPropertiesTaxonOriginal[key],\r\n\t\t\t\toPropertiesTaxon[key])) {\r\n\t\t\t\toModifiedPropertiesDict[key] = oPropertiesTaxon[key];\r\n\t\t\t}\r\n\t\t}, this);\r\n\r\n\t\treturn oModifiedPropertiesDict;\r\n\t}\r\n\r\n\tgetModifiedImages(): PImage[] {\r\n\t\t// identify modified images by comparing images with their clones (created after loading)\r\n\t\tvar oImages: ImageMap = this.oComponent.imagesRegistry;\r\n\t\tvar oImagesClone: ImageMap = this.oComponent.imagesRegistryClone;\r\n\r\n\t\tvar aModifiedImages: PImage[] = [];\r\n\t\tObject.keys(oImages).forEach(path => {\r\n\t\t\tif (!(path in oImagesClone) || !Util.dictsAreEqual(oImages[path], oImagesClone[path])) {\r\n\t\t\t\taModifiedImages.push(oImages[path]);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn aModifiedImages;\r\n\t}\r\n\r\n\tsavePlantsAndImages() {\r\n\t\t// saving images, plants, taxa, and events model\r\n\t\tUtil.startBusyDialog('Saving...', 'Plants and Images');\r\n\t\tthis.savingPlants = false;\r\n\t\tthis.savingImages = false;\r\n\t\tthis.savingTaxa = false;\r\n\t\tthis.savingEvents = false;\r\n\t\tthis.savingProperties = false;\r\n\r\n\t\tvar aModifiedPlants = this.getModifiedPlants();\r\n\t\tvar aModifiedImages = this.getModifiedImages();\r\n\t\tvar aModifiedTaxa = this.getModifiedTaxa();\r\n\t\tvar dModifiedEvents = this._getModifiedEvents();\r\n\t\tvar dModifiedPropertiesPlants = this._getModifiedPropertiesPlants();\r\n\t\tvar dModifiedPropertiesTaxa = this._getModifiedPropertiesTaxa();\r\n\r\n\t\t// cancel busydialog if nothing was modified (callbacks not triggered)\r\n\t\tif ((aModifiedPlants.length === 0) && (aModifiedImages.length === 0) && (aModifiedTaxa.length === 0)\r\n\t\t\t&& (Object.keys(dModifiedEvents).length === 0) && (Object.keys(dModifiedPropertiesPlants).length === 0) && (Object.keys(dModifiedPropertiesTaxa).length === 0)) {\r\n\t\t\tMessageToast.show('Nothing to save.');\r\n\t\t\tUtil.stopBusyDialog();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// save plants\r\n\t\tif (aModifiedPlants.length > 0) {\r\n\t\t\tthis.savingPlants = true;  // required in callback function  to find out if both savings are finished\r\n\t\t\tvar dPayloadPlants = { 'PlantsCollection': aModifiedPlants };\r\n\t\t\t$.ajax({\r\n\t\t\t\turl: Util.getServiceUrl('plants/'),\r\n\t\t\t\ttype: 'POST',\r\n\t\t\t\tcontentType: \"application/json\",\r\n\t\t\t\tdata: JSON.stringify(dPayloadPlants),\r\n\t\t\t\tcontext: this\r\n\t\t\t})\r\n\t\t\t\t.done(this._onAjaxSuccessSave)\r\n\t\t\t\t.fail(ModelsHelper.getInstance().onReceiveErrorGeneric.bind(this, 'Plant (POST)'));\r\n\t\t}\r\n\r\n\t\t// save images\r\n\t\tif (aModifiedImages.length > 0) {\r\n\t\t\tthis.savingImages = true;\r\n\t\t\tvar dPayloadImages = { 'ImagesCollection': aModifiedImages };\r\n\t\t\t$.ajax({\r\n\t\t\t\turl: Util.getServiceUrl('images/'),\r\n\t\t\t\ttype: 'PUT',\r\n\t\t\t\tcontentType: \"application/json\",\r\n\t\t\t\tdata: JSON.stringify(dPayloadImages),\r\n\t\t\t\tcontext: this\r\n\t\t\t})\r\n\t\t\t\t.done(this._onAjaxSuccessSave)\r\n\t\t\t\t.fail(ModelsHelper.getInstance().onReceiveErrorGeneric.bind(this, 'Image (PUT)'));\r\n\t\t}\r\n\r\n\t\t// save taxa\r\n\t\tif (aModifiedTaxa.length > 0) {\r\n\t\t\tthis.savingTaxa = true;\r\n\r\n\r\n\t\t\t// cutting occurrence images (read-only)\r\n\t\t\tvar aModifiedTaxaSave: Taxon[] = Util.getClonedObject(aModifiedTaxa);\r\n\t\t\taModifiedTaxaSave = aModifiedTaxaSave.map(m => {\r\n\t\t\t\tdelete m.occurrenceImages;\r\n\t\t\t\treturn m;\r\n\t\t\t});\r\n\r\n\t\t\tvar dPayloadTaxa = { 'ModifiedTaxaCollection': aModifiedTaxaSave };\r\n\t\t\t$.ajax({\r\n\t\t\t\turl: Util.getServiceUrl('taxa/'),\r\n\t\t\t\ttype: 'PUT',\r\n\t\t\t\tcontentType: \"application/json\",\r\n\t\t\t\tdata: JSON.stringify(dPayloadTaxa),\r\n\t\t\t\tcontext: this\r\n\t\t\t})\r\n\t\t\t\t.done(this._onAjaxSuccessSave)\r\n\t\t\t\t.fail(ModelsHelper.getInstance().onReceiveErrorGeneric.bind(this, 'Taxon (POST)'));\r\n\t\t}\r\n\r\n\t\t// save events\r\n\t\tif (Object.keys(dModifiedEvents).length > 0) {\r\n\t\t\tthis.savingEvents = true;\r\n\t\t\tvar dPayloadEvents = { 'plants_to_events': dModifiedEvents };\r\n\t\t\t$.ajax({\r\n\t\t\t\turl: Util.getServiceUrl('events/'),\r\n\t\t\t\ttype: 'POST',\r\n\t\t\t\tcontentType: \"application/json\",\r\n\t\t\t\tdata: JSON.stringify(dPayloadEvents),\r\n\t\t\t\tcontext: this\r\n\t\t\t})\r\n\t\t\t\t.done(this._onAjaxSuccessSave)\r\n\t\t\t\t.fail(ModelsHelper.getInstance().onReceiveErrorGeneric.bind(this, 'Event (POST)'));\r\n\t\t}\r\n\r\n\t\t// save properties\r\n\t\tif (Object.keys(dModifiedPropertiesPlants).length > 0) {\r\n\t\t\tthis.savingProperties = true;\r\n\t\t\tvar dPayloadProperties = { 'modifiedPropertiesPlants': dModifiedPropertiesPlants };\r\n\t\t\t$.ajax({\r\n\t\t\t\turl: Util.getServiceUrl('plant_properties/'),\r\n\t\t\t\ttype: 'POST',\r\n\t\t\t\tcontentType: \"application/json\",\r\n\t\t\t\tdata: JSON.stringify(dPayloadProperties),\r\n\t\t\t\tcontext: this\r\n\t\t\t})\r\n\t\t\t\t.done(this._onAjaxSuccessSave)\r\n\t\t\t\t.fail(ModelsHelper.getInstance().onReceiveErrorGeneric.bind(this, 'plant_properties (POST)'));\r\n\t\t}\r\n\r\n\t\t// save properties taxa\r\n\t\tif (Object.keys(dModifiedPropertiesTaxa).length > 0 || Object.keys(dModifiedPropertiesTaxa).length > 0) {\r\n\t\t\tthis.savingPropertiesTaxa = true;\r\n\t\t\tvar dPayloadPropertiesTaxa = { 'modifiedPropertiesTaxa': dModifiedPropertiesTaxa };\r\n\t\t\t$.ajax({\r\n\t\t\t\turl: Util.getServiceUrl('taxon_properties/'),\r\n\t\t\t\ttype: 'POST',\r\n\t\t\t\tcontentType: \"application/json\",\r\n\t\t\t\tdata: JSON.stringify(dPayloadPropertiesTaxa),\r\n\t\t\t\tcontext: this\r\n\t\t\t})\r\n\t\t\t\t.done(this._onAjaxSuccessSave)\r\n\t\t\t\t.fail(ModelsHelper.getInstance().onReceiveErrorGeneric.bind(this, 'taxon_properties (POST)'));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic saveNewPlant(oPlant: PPlant) {\r\n\t\t// save a new plant (only plant_name) to backend to receive plant id\r\n\t\tvar dPayloadPlants = { 'PlantsCollection': [oPlant] };\r\n\t\tUtil.startBusyDialog('Creating...', 'new plant ' + oPlant.plant_name);\r\n\t\tvar that = this;\r\n\t\t$.ajax({\r\n\t\t\turl: Util.getServiceUrl('plants/'),\r\n\t\t\ttype: 'POST',\r\n\t\t\tcontentType: \"application/json\",\r\n\t\t\tdata: JSON.stringify(dPayloadPlants),\r\n\t\t\tcontext: this\r\n\t\t})\r\n\t\t\t.done(function (oData: PResultsPlantsUpdate, sStatus: string, oReturnData: any) {\r\n\t\t\t\t// add new plant to model\r\n\t\t\t\tvar oPlantSaved = oData.plants[0];\r\n\t\t\t\tvar aPlants = that.oComponent.getModel('plants').getProperty('/PlantsCollection');\r\n\t\t\t\tvar iPlantsCount = aPlants.push(oPlantSaved);  // append at end to preserve change tracking with clone \r\n\t\t\t\tthat.oComponent.getModel('plants').updateBindings(false);\r\n\r\n\t\t\t\t// ...and add to cloned plants to allow change tracking\r\n\t\t\t\tvar oPlantClone = Util.getClonedObject(oPlantSaved);\r\n\t\t\t\tthat.oComponent.oPlantsDataClone.PlantsCollection.push(oPlantClone);\r\n\t\t\t\tMessageToast.show('Created plant ID ' + oPlantSaved.id + ' (' + oPlantSaved.plant_name + ')');\r\n\r\n\t\t\t\t// finally navigate to the newly created plant in details view\r\n\t\t\t\t// Navigation.navToPlantDetails.call(this, iPlantsCount-1);\r\n\t\t\t\tNavigation.getInstance().navToPlantDetails(oPlantSaved.id!);\r\n\r\n\t\t\t})\r\n\t\t\t.fail(ModelsHelper.getInstance().onReceiveErrorGeneric.bind(this, 'Plant (POST)'))\r\n\t\t\t.always(function () {\r\n\t\t\t\tUtil.stopBusyDialog();\r\n\t\t\t});\r\n\t}\r\n\r\n\tpublic isPlantNameInPlantsModel(sPlantName: string) {\r\n\t\tvar aPlants = <PPlant[]>this.oComponent.getModel('plants').getProperty('/PlantsCollection');\r\n\t\treturn (aPlants.find(ele => ele.plant_name === sPlantName) !== undefined);\r\n\t}\r\n\r\n\tgetPlantById(plantId: int) {\r\n\t\t// todo replace other implementation of function with this here\r\n\t\tvar aPlants: PPlant[] = this.oComponent.getModel('plants').getProperty('/PlantsCollection');\r\n\t\tvar oPlant = aPlants.find(ele => ele.id === plantId);\r\n\t\tif (oPlant === undefined) {\r\n\t\t\tthrow \"Plant not found\";\r\n\t\t} else {\r\n\t\t\treturn oPlant;\r\n\t\t}\r\n\t}\r\n\r\n\tgetPlantByName(plantName: string): PPlant {\r\n\t\t// todo replace other implementation of function with this here\r\n\t\tvar plants: PPlant[] = this.oComponent.getModel('plants').getProperty('/PlantsCollection');\r\n\t\tvar plant = plants.find(ele => ele.plant_name === plantName);\r\n\t\tif (plant === undefined) {\r\n\t\t\tthrow \"Plant not found: \" + plantName;\r\n\t\t} else {\r\n\t\t\treturn plant;\r\n\t\t}\r\n\t}\r\n\r\n\tonAjaxSimpleSuccess(oConfirmation: PConfirmation, sStatus: string, oReturnData: object) {\r\n\t\t//toast and create message\r\n\t\t//requires pre-defined message from backend\r\n\t\tMessageToast.show(oConfirmation.message.message);\r\n\t\tMessageUtil.getInstance().addMessageFromBackend(oConfirmation.message);\r\n\t}\r\n\r\n\tprivate _onAjaxSuccessSave(oMsg: PConfirmation, sStatus: string, oReturnData: object) {\r\n\t\t// cancel busydialog only if neither saving plants nor images or taxa is still running\r\n\t\tif (oMsg.resource === 'PlantResource') {\r\n\t\t\tthis.savingPlants = false;\r\n\t\t\tvar oModelPlants = this.oComponent.getModel('plants');\r\n\t\t\tvar dDataPlants = oModelPlants.getData();\r\n\t\t\tthis.oComponent.oPlantsDataClone = Util.getClonedObject(dDataPlants);\r\n\t\t} else if (oMsg.resource === 'ImageResource') {\r\n\t\t\tthis.savingImages = false;\r\n\t\t\tvar oImages = this.oComponent.imagesRegistry;\r\n\t\t\tthis.oComponent.imagesRegistryClone = Util.getClonedObject(oImages);\r\n\t\t\t// var oModelImages = this.oComponent.getModel('images');\r\n\t\t\t// var dDataImages = oModelImages.getData();\r\n\t\t\t// this.oComponent.oImagesDataClone = Util.getClonedObject(dDataImages);\r\n\t\t} else if (oMsg.resource === 'TaxonResource') {\r\n\t\t\tthis.savingTaxa = false;\r\n\t\t\tvar oModelTaxon = this.oComponent.getModel('taxon');\r\n\t\t\tvar dDataTaxon = oModelTaxon.getData();\r\n\t\t\tthis.oComponent.oTaxonDataClone = Util.getClonedObject(dDataTaxon);\r\n\t\t} else if (oMsg.resource === 'EventResource') {\r\n\t\t\tthis.savingEvents = false;\r\n\t\t\tvar oModelEvents = this.oComponent.getModel('events');\r\n\t\t\tvar dDataEvents = oModelEvents.getData();\r\n\t\t\tthis.oComponent.oEventsDataClone = Util.getClonedObject(dDataEvents.PlantsEventsDict);\r\n\t\t\tMessageUtil.getInstance().addMessageFromBackend(oMsg.message);\r\n\t\t} else if (oMsg.resource === 'PropertyResource') {\r\n\t\t\tthis.savingProperties = false;\r\n\t\t\tvar oModelProperties = this.oComponent.getModel('properties');\r\n\t\t\tvar dDataProperties = oModelProperties.getData();\r\n\t\t\tvar propertiesPlantsWithoutTaxa = this._getPropertiesSansTaxa(dDataProperties.propertiesPlants);\r\n\t\t\tthis.oComponent.oPropertiesDataClone = Util.getClonedObject(propertiesPlantsWithoutTaxa);\r\n\t\t\tMessageUtil.getInstance().addMessageFromBackend(oMsg.message);\r\n\t\t} else if (oMsg.resource === 'PropertyTaxaResource') {\r\n\t\t\tthis.savingPropertiesTaxa = false;\r\n\t\t\tvar oModelPropertiesTaxa = this.oComponent.getModel('propertiesTaxa');\r\n\t\t\tvar dDataPropertiesTaxa = oModelPropertiesTaxa.getData();\r\n\t\t\tthis.oComponent.oPropertiesTaxonDataClone = Util.getClonedObject(dDataPropertiesTaxa.propertiesTaxon);\r\n\t\t\tMessageUtil.getInstance().addMessageFromBackend(oMsg.message);\r\n\t\t}\r\n\r\n\t\tif (!this.savingPlants && !this.savingImages && !this.savingTaxa && !this.savingEvents && !this.savingProperties && !this.savingPropertiesTaxa) {\r\n\t\t\tUtil.stopBusyDialog();\r\n\t\t}\r\n\t}\r\n\r\n\tupdateTableHeaderPlantsCount() {\r\n\t\t// update count in table header\r\n\t\tvar iPlants = (<ListBinding>this.getView().byId(\"plantsTable\").getBinding(\"items\")).getLength();\r\n\t\tvar sTitle = \"Plants (\" + iPlants + \")\";\r\n\t\t(<Label>this.getView().byId(\"pageHeadingTitle\")).setText(sTitle);\r\n\t}\r\n\r\n\thandleErrorMessageBox(sText: string) {\r\n\t\tvar bCompact = !!this.getView().$().closest(\".sapUiSizeCompact\").length;\r\n\t\tMessageBox.error(sText, {\r\n\t\t\tstyleClass: bCompact ? \"sapUiSizeCompact\" : \"\"\r\n\t\t});\r\n\t}\r\n\r\n\tpublic onCancelDialog(oEvent: Event) {\r\n\t\t// generic handler for fragments to be closed\r\n\t\tlet oControl = <Control>oEvent.getSource();\r\n\r\n\t\t// navigate through the control tree until we have a sap.m.Dialog or a sap.m.Popover\r\n\t\tdo {\r\n\t\t\toControl = <Control>oControl.getParent();\r\n\t\t} while (oControl.getParent() !== undefined && !(oControl instanceof Dialog) && !(oControl instanceof Popover) && !(oControl instanceof ViewSettingsDialog));\r\n\r\n\t\tif (!oControl){\r\n\t\t\tMessageToast.show(\"Error: Could not find Dialog or Popover to close\");\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t(<Dialog|Popover>oControl).close();\r\n\r\n\t\t// this.applyToFragment(dialogId, (oDialog: Dialog) => oDialog.close());\r\n\t}\r\n\r\n\tprotected confirmDeleteImage(oImage: PImage, sAction: string) {\r\n\t\t// triggered by onIconPressDeleteImage's confirmation dialogue from both Untagged and Detail View\r\n\t\tif (sAction !== 'Delete') {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//send delete request\r\n\t\tvar oPayload = { 'images': [{ 'filename': oImage.filename }] }\r\n\t\t$.ajax({\r\n\t\t\turl: Util.getServiceUrl('images/'),\r\n\t\t\ttype: 'DELETE',\r\n\t\t\tcontentType: \"application/json\",\r\n\t\t\tdata: JSON.stringify(oPayload),\r\n\t\t\tcontext: this\r\n\t\t})\r\n\t\t\t.done(this.onAjaxDeletedImagesSuccess.bind(this, [oImage], undefined))\r\n\t\t\t.fail(ModelsHelper.getInstance().onReceiveErrorGeneric.bind(this, 'Image (DELETE)'));\r\n\t}\r\n\r\n\t// use a closure to pass an element to the callback function\r\n\tprotected onAjaxDeletedImagesSuccess(aDeletedImages: PImage[], cbCallback: Function | undefined, data: PConfirmation, textStats: any, jqXHR: any) {\r\n\t\t//show default success message after successfully deleting image in backend (either from untagged or detail view)\r\n\t\tthis.onAjaxSimpleSuccess(data, textStats, jqXHR);\r\n\r\n\t\t// delete image in models...\r\n\t\tconst oImagesModel = this.oComponent.getModel('images');\r\n\t\tconst oUntaggedImagesModel = this.oComponent.getModel('untaggedImages');\r\n\t\tvar aDataImages = <PImage[]>oImagesModel.getData().ImagesCollection;\r\n\t\tvar aDataUntagged = <PImage[]>oUntaggedImagesModel.getData().ImagesCollection;\r\n\r\n\t\tvar context = this;  // for the closure\r\n\t\taDeletedImages.forEach(function (image: PImage) {\r\n\r\n\t\t\tvar iPosImages = aDataImages.indexOf(image);\r\n\t\t\tif (iPosImages >= 0) {\r\n\t\t\t\taDataImages.splice(iPosImages, 1);\r\n\t\t\t}\r\n\r\n\t\t\tvar iPosImages = aDataUntagged.indexOf(image);\r\n\t\t\tif (iPosImages >= 0) {\r\n\t\t\t\taDataUntagged.splice(iPosImages, 1);\r\n\t\t\t}\r\n\r\n\t\t\t//... and deleted image in images registry\r\n\t\t\tdelete context.oComponent.imagesRegistry[image.filename]\r\n\t\t\tdelete context.oComponent.imagesRegistry[image.filename]\r\n\t\t\tdelete context.oComponent.imagesRegistryClone[image.filename]\r\n\r\n\t\t});\r\n\t\tthis.oComponent.getModel('images').refresh();\r\n\t\tthis.oComponent.getModel('untaggedImages').refresh();\r\n\r\n\t\tif (!!cbCallback) {\r\n\t\t\tcbCallback();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected onReceiveSuccessGeneric(oMsg: PMessage) {\r\n\t\tUtil.stopBusyDialog();\r\n\t\tMessageToast.show(oMsg.message);\r\n\t\tMessageUtil.getInstance().addMessageFromBackend(oMsg);\r\n\t}\r\n\r\n\taddPhotosToRegistry(aPhotos: PImage[]) {\r\n\t\t///////////////TODOOOOOOOOo why is there a method with same name in the component????///////////7\r\n\t\t// add photos loaded for a plant to the registry if not already loaded with other plant\r\n\t\t// plus add a copy of the photo to a clone registry for getting changed photos when saving \r\n\t\taPhotos.forEach((photo: PImage) => {\r\n\t\t\tif (!(photo.filename in this.oComponent.imagesRegistry)) {\r\n\t\t\t\tthis.oComponent.imagesRegistry[photo.filename] = photo;\r\n\t\t\t\tthis.oComponent.imagesRegistryClone[photo.filename] = Util.getClonedObject(photo);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tresetImagesCurrentPlant(plant_id: int) {\r\n\t\t// @ts-ignore // typescript doesn't like Object.entries\r\n\t\tconst aPhotosArr = <[string, PImage][]>Object.entries(this.oComponent.imagesRegistry).filter(t => (t[1].plants.filter(p => p.plant_id === plant_id)).length == 1);\r\n\t\tvar aPhotos = <PImage[]>aPhotosArr.map(p => p[1]);\r\n\t\tthis.oComponent.getModel('images').setProperty('/ImagesCollection', aPhotos);\r\n\t\tUtil.stopBusyDialog(); // had been started in details onPatternMatched\r\n\t}\r\n\r\n\tgetSuggestionItem(rootKey: 'propagationTypeCollection', key: string | LPropagationType) {\r\n\t\t// retrieve an item from suggestions model via root key and key\r\n\t\t// example usage: var selected = getSuggestionItem('propagationTypeCollection', 'bulbil');\r\n\t\tlet suggestions;\r\n\t\tswitch (rootKey) {\r\n\t\t\tcase 'propagationTypeCollection':\r\n\t\t\t\tsuggestions = <LPropagationType[]>this.oComponent.getModel('suggestions').getProperty('/' + rootKey);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tthrow \"Root Key not found: \" + rootKey;\r\n\t\t}\r\n\r\n\t\tconst suggestion = suggestions.find(s => s['key'] === key);\r\n\t\tif (!suggestion) {\r\n\t\t\tthrow \"Suggestion Key not found: \" + key;\r\n\t\t}\r\n\t\treturn suggestion;\r\n\t}\r\n}"],"mappings":"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"}