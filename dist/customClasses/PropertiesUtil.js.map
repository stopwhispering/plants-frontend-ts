{"version":3,"file":"PropertiesUtil.js","names":["ModelsHelper","MessageUtil","PropertiesUtil","ManagedObject","constructor","applyToFragment","editPropertyValueDelete","oPropertiesModel","oPropertiesTaxaModel","oPropertiesBindingContext","oCurrentPlant","sPathPropertyValue","getPath","oPropertyValue","getObject","type","sPathPropertyValues","substr","lastIndexOf","sPathPropertyName","iPropertyNameId","getProperty","property_name_id","sPath_1","sPathCategory","iCategoryId","category_id","iTaxonId","taxon_id","sPath","aPropertyNames","foundPropertyName","find","ele","foundPropertyValue","property_values","iIndexTaxonPropertyValue","indexOf","splice","length","iIndexPropertyName","aPathPropertyValues","iIndex","refresh","_getTemporaryAvailablePropertiesModel","oCategory","oModelPropertyNames","sPathPropertiesAvailable","category_name","aPropertiesAvailable","aCompared","_comparePropertiesLists","properties","JSONModel","aPropertiesUsed","aList","undefined","forEach","entry","sName","property_name","found","element","selected_plant","selected_taxon","blocked_plant","blocked_taxon","oItem","push","openDialogNewProperty","oPlant","oSource","MessageToast","show","sBindingPathProperties","getBindingContext","oPopover","bindElement","path","model","openBy","_btnNew","setType","createNewPropertyName","oView","sPropertyName","byId","getValue","sCategoryName","getModel","countPlants","bAddToPlant","getSelected","bAddToTaxon","property_value","oProperty","oEntry","oEmptyPropertyValue","_insertPropertyIntoPropertiesTaxaModel","close","closeNewPropertyNameDialog","openDialogAddProperty","oBtnAddProperty","destroy","oModelTemp","setModel","_btnAdd","addProperty","aPropertiesFromDialog","getData","oPropertiesInCategory","aProperties","i","aPropertyValues","oItem_","aCurrentPropertyNames","propertiesTaxon","_taxon_properties_already_loaded","oOwnerComponent","loadPropertiesForCurrentPlant","sPlantId","encodeURIComponent","id","uri","oPayload","$","ajax","url","Util","getServiceUrl","data","context","async","done","_onReceivingPropertiesForPlant","bind","fail","getInstance","onReceiveErrorGeneric","oData","sStatus","oResponse","setProperty","propertyCollections","oPropertiesDataClone","getClonedObject","Object","keys","propertyCollectionsTaxon","categories","oPropertiesTaxonDataClone","_appendTaxonPropertiesToPlantProperties","addMessageFromBackend","message","oModelPropertiesTaxon","oModelPropertiesPlant","oCategoriesTaxon","aCategoriesPlant","aCategoryIds","map","sCategoryId","parseInt","plant_category","j","plant_property_name","_instance"],"sources":["../../src/customClasses/PropertiesUtil.ts"],"sourcesContent":["import * as Util from \"plants/ui/customClasses/Util\";\r\nimport MessageToast from \"sap/m/MessageToast\"\r\nimport ModelsHelper from \"plants/ui/model/ModelsHelper\"\r\nimport MessageUtil from \"plants/ui/customClasses/MessageUtil\"\r\nimport JSONModel from \"sap/ui/model/json/JSONModel\"\r\nimport ManagedObject from \"sap/ui/base/ManagedObject\"\r\nimport Context from \"sap/ui/model/Context\";\r\nimport {\r\n\tCategoryToPropertiesInCategoryMap, PlantPropertiesRequest, PPropertiesInCategory, PProperty,\r\n\tPPropertyName, PPropertyValue, PResultsPropertiesForPlant, TemporaryAvailableProperties\r\n} from \"../definitions/property_entities\";\r\nimport View from \"sap/ui/core/mvc/View\";\r\nimport Button from \"sap/m/Button\";\r\nimport Popover from \"sap/m/Popover\";\r\nimport Component from \"../Component\";\r\nimport Input from \"sap/m/Input\";\r\nimport CheckBox from \"sap/m/CheckBox\";\r\nimport Dialog from \"sap/m/Dialog\";\r\nimport { PPlant } from \"../definitions/plant_entities\";\r\nimport { ResponseStatus } from \"../definitions/shared_types\";\r\n\r\n/**\r\n * @namespace plants.ui.customClasses\r\n */\r\nexport default class PropertiesUtil extends ManagedObject {\r\n\tprivate _btnAdd: Button;\r\n\tprivate _btnNew: Button;\r\n\r\n\r\n\tprivate static _instance: PropertiesUtil;\r\n\tprivate applyToFragment: Function;\r\n\r\n\tpublic static getInstance(applyToFragment?: Function): PropertiesUtil {\r\n\t\tif (!PropertiesUtil._instance && applyToFragment) {\r\n\t\t\tPropertiesUtil._instance = new PropertiesUtil(applyToFragment);\r\n\t\t}\r\n\t\treturn PropertiesUtil._instance;\r\n\t}\r\n\r\n\tprivate constructor(applyToFragment: Function) {\r\n\t\tsuper();\r\n\t\tthis.applyToFragment = applyToFragment;\r\n\t}\r\n\r\n\tpublic editPropertyValueDelete(oPropertiesModel: JSONModel, oPropertiesTaxaModel: JSONModel, oPropertiesBindingContext: Context, oCurrentPlant: PPlant) {\r\n\t\t// delete a property value, either for current plant or it's taxon\r\n\t\tvar sPathPropertyValue = oPropertiesBindingContext.getPath();\r\n\t\tvar oPropertyValue = <PPropertyValue>oPropertiesBindingContext.getObject();\r\n\r\n\t\t// if it's a taxon's property value, we need to remove it from the original taxon properties model as well\r\n\t\tif (oPropertyValue.type === 'taxon') {\r\n\t\t\t// get property name id\r\n\t\t\tvar sPathPropertyValues = sPathPropertyValue.substr(0, sPathPropertyValue.lastIndexOf('/'));\r\n\t\t\tvar sPathPropertyName = sPathPropertyValues.substr(0, sPathPropertyValues.lastIndexOf('/'));\r\n\t\t\tvar iPropertyNameId = oPropertiesModel.getProperty(sPathPropertyName).property_name_id;\r\n\r\n\t\t\t// get category id\r\n\t\t\tvar sPath_1 = sPathPropertyName.substr(0, sPathPropertyName.lastIndexOf('/'));\r\n\t\t\tvar sPathCategory = sPath_1.substr(0, sPath_1.lastIndexOf('/'));\r\n\t\t\tvar iCategoryId = oPropertiesModel.getProperty(sPathCategory).category_id;\r\n\r\n\t\t\t// var iTaxonId = evt.getSource().getBindingContext('plants').getObject().taxon_id;\r\n\t\t\tvar iTaxonId = oCurrentPlant.taxon_id;\r\n\r\n\t\t\t// now we can find the respective node in the taxon properties model\r\n\t\t\t// find path in taxon properties model\r\n\t\t\tvar sPath = '/propertiesTaxon/' + iTaxonId + '/' + iCategoryId + '/properties';\r\n\t\t\tvar aPropertyNames = <PProperty[]>oPropertiesTaxaModel.getProperty(sPath);\r\n\t\t\tvar foundPropertyName = aPropertyNames.find(ele => ele['property_name_id'] == iPropertyNameId);\r\n\t\t\tvar foundPropertyValue = foundPropertyName!.property_values.find(ele => ele['type'] == 'taxon');\r\n\r\n\t\t\t// delete\r\n\t\t\tvar iIndexTaxonPropertyValue = foundPropertyName!.property_values.indexOf(foundPropertyValue!);\r\n\t\t\tfoundPropertyName!.property_values.splice(iIndexTaxonPropertyValue, 1);\r\n\r\n\t\t\t// finally delete the property name node if there's no property value left (currently always the case)\r\n\t\t\tif (foundPropertyName!.property_values.length === 0) {\r\n\t\t\t\tvar iIndexPropertyName = aPropertyNames.indexOf(foundPropertyName!);\r\n\t\t\t\taPropertyNames.splice(iIndexPropertyName, 1);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//delete from (plants) properties model\r\n\t\tsPathPropertyValues = sPathPropertyValue.substr(0, sPathPropertyValue.lastIndexOf('/'));\r\n\t\tvar aPathPropertyValues = oPropertiesModel.getProperty(sPathPropertyValues);\r\n\t\tvar iIndex = aPathPropertyValues.indexOf(oPropertyValue);\r\n\t\taPathPropertyValues.splice(iIndex, 1);\r\n\r\n\t\toPropertiesModel.refresh();\r\n\t}\r\n\r\n\tprivate _getTemporaryAvailablePropertiesModel(oCategory: PPropertiesInCategory, oModelPropertyNames: JSONModel): JSONModel {\r\n\t\tvar sPathPropertiesAvailable = '/propertiesAvailablePerCategory/' + oCategory.category_name;\r\n\t\tvar aPropertiesAvailable: PPropertyName[] = oModelPropertyNames.getProperty(sPathPropertiesAvailable);\r\n\r\n\t\t// check which properties are already used for this plant\r\n\t\tvar aCompared: TemporaryAvailableProperties[] = this._comparePropertiesLists(aPropertiesAvailable, oCategory.properties);\r\n\t\treturn new JSONModel(aCompared);\r\n\t}\r\n\r\n\tprivate _comparePropertiesLists(aPropertiesAvailable: PPropertyName[], aPropertiesUsed: PProperty[]): TemporaryAvailableProperties[] {\r\n\r\n\t\tvar aList: TemporaryAvailableProperties[] = [];\r\n\t\tif (aPropertiesAvailable === undefined) {\r\n\t\t\taPropertiesAvailable = [];\r\n\t\t}\r\n\t\taPropertiesAvailable.forEach(function (entry) {\r\n\t\t\tvar sName = entry.property_name;\r\n\t\t\tvar found = aPropertiesUsed.find(element => element.property_name === sName);\r\n\r\n\t\t\t// set whether plant and/or taxon property value is already used (thus blocked)\r\n\t\t\tlet selected_plant, selected_taxon, blocked_plant, blocked_taxon;\r\n\t\t\tif (found && found.property_values.find(ele => ele.type === 'plant')) {\r\n\t\t\t\tselected_plant = true;\r\n\t\t\t\tblocked_plant = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tselected_plant = false;\r\n\t\t\t\tblocked_plant = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (found && found.property_values.find(ele => ele.type === 'taxon')) {\r\n\t\t\t\tselected_taxon = true;\r\n\t\t\t\tblocked_taxon = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tselected_taxon = false;\r\n\t\t\t\tblocked_taxon = false;\r\n\t\t\t}\r\n\t\t\tvar oItem: TemporaryAvailableProperties = {\r\n\t\t\t\tproperty_name: sName,\r\n\t\t\t\tproperty_name_id: entry.property_name_id!,\r\n\t\t\t\tselected_plant: selected_plant,\r\n\t\t\t\tselected_taxon: selected_taxon,\r\n\t\t\t\tblocked_plant: blocked_plant,\r\n\t\t\t\tblocked_taxon: blocked_taxon\r\n\t\t\t}\r\n\t\t\taList.push(oItem);\r\n\t\t});\r\n\t\treturn aList;\r\n\t}\r\n\r\n\topenDialogNewProperty(oPlant: PPlant, oSource: Button) {\r\n\t\tif (!oPlant.taxon_id) {\r\n\t\t\tMessageToast.show('Function available after setting botanical name.');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// bind current category in properties model to fragment\r\n\t\tvar sBindingPathProperties = oSource.getBindingContext('properties')!.getPath();\r\n\r\n\t\tthis.applyToFragment('dialogNewPropertyName', (oPopover: Popover) => {\r\n\t\t\toPopover.bindElement({\r\n\t\t\t\tpath: sBindingPathProperties,\r\n\t\t\t\tmodel: \"properties\"\r\n\t\t\t});\r\n\t\t\toPopover.openBy(oSource, true);\r\n\t\t});\r\n\r\n\t\tthis._btnNew = oSource;\r\n\t\tthis._btnNew.setType('Emphasized');\r\n\t}\r\n\r\n\tpublic createNewPropertyName(oSource: Input | Button, oView: View) {\r\n\t\tvar sPropertyName = (<Input>oView.byId('inpPropertyName')).getValue();\r\n\t\tif (!sPropertyName) {\r\n\t\t\tMessageToast.show('Enter Property Name.');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t//check if already exists in property names model\r\n\t\tconst oCategory = <PPropertiesInCategory>oSource.getBindingContext('properties')!.getObject();\r\n\t\tvar sCategoryName = oCategory.category_name;\r\n\t\tvar oModelPropertyNames = oSource.getModel('propertyNames');\r\n\t\tvar aPropertyNames = <PPropertyName[]>oModelPropertyNames.getProperty('/propertiesAvailablePerCategory/' + sCategoryName);\r\n\t\tvar foundPropertyName = <PPropertyName>aPropertyNames.find(ele => ele['property_name'] == sPropertyName);\r\n\t\tif (foundPropertyName) {\r\n\t\t\tMessageToast.show('Property Name already exists.');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// add to property names model\r\n\t\taPropertyNames.push(<PPropertyName>{\r\n\t\t\t// property_name_id: undefined\r\n\t\t\tcountPlants: 0,\r\n\t\t\tproperty_name: sPropertyName,\r\n\t\t});\r\n\r\n\r\n\t\tvar bAddToPlant = (<CheckBox>oView.byId(\"chkNewPropertyNameAddToPlant\")).getSelected();\r\n\t\tvar bAddToTaxon = (<CheckBox>oView.byId(\"chkNewPropertyNameAddToTaxon\")).getSelected();\r\n\r\n\t\t// add empty property value item for plant if selected\r\n\t\tif (bAddToPlant) {\r\n\t\t\tconst oPropertyValue = <PPropertyValue>{\r\n\t\t\t\ttype: 'plant',\r\n\t\t\t\t// property_value_id: undefined,\r\n\t\t\t\tproperty_value: ''\r\n\t\t\t}\r\n\t\t\tconst oProperty = <PProperty>{\r\n\t\t\t\t// property_name_id: undefined,\r\n\t\t\t\tproperty_name: sPropertyName,\r\n\t\t\t\tproperty_values: [oPropertyValue]\r\n\t\t\t\t// property_value: undefined\r\n\t\t\t\t// property_value_id: undefined\r\n\t\t\t};\r\n\t\t\toCategory.properties.push(oProperty);\r\n\t\t}\r\n\r\n\t\t// add empty property value item for taxon if selected\r\n\t\tif (bAddToTaxon) {\r\n\t\t\t// will be inserted into both models to keep the same/updated!\r\n\t\t\tconst oPropertyValue = <PPropertyValue>{\r\n\t\t\t\ttype: 'taxon',\r\n\t\t\t\t// property_value_id: undefined,\r\n\t\t\t\tproperty_value: ''\r\n\t\t\t}\r\n\r\n\t\t\tvar oProperty = <PProperty>{\r\n\t\t\t\t// property_name_id: undefined,\r\n\t\t\t\tproperty_name: sPropertyName,\r\n\t\t\t\tproperty_values: [oPropertyValue]\r\n\t\t\t\t// property_value: undefined\r\n\t\t\t\t// property_value_id: undefined\r\n\t\t\t};\r\n\t\t\toCategory.properties.push(oProperty);\r\n\r\n\t\t\t//properties taxon model\r\n\t\t\tvar oEntry = <TemporaryAvailableProperties>{\r\n\t\t\t\tproperty_name: sPropertyName,\r\n\t\t\t\tproperty_name_id: undefined\r\n\t\t\t};\r\n\t\t\tvar oPlant = <PPlant>oSource.getBindingContext('plants')!.getObject();\r\n\t\t\tconst oPropertiesTaxaModel = <JSONModel>oView.getModel('propertiesTaxa');\r\n\t\t\tconst oEmptyPropertyValue = <PPropertyValue>{\r\n\t\t\t\ttype: 'taxon',\r\n\t\t\t\tproperty_value: '',\r\n\t\t\t}\r\n\t\t\tthis._insertPropertyIntoPropertiesTaxaModel(oEmptyPropertyValue, oCategory.category_id, oPlant.taxon_id!, oEntry, oPropertiesTaxaModel);\r\n\t\t}\r\n\r\n\t\toView.getModel('properties').refresh();\r\n\t\t(<Dialog>oView.byId('dialogNewPropertyName')).close();\r\n\t\t// this._oNewPropertyNameFragment.close();\r\n\t\tthis._btnNew.setType('Transparent');\r\n\t}\r\n\r\n\tpublic closeNewPropertyNameDialog() {\r\n\t\tthis._btnNew.setType('Transparent');\r\n\t}\r\n\r\n\tpublic openDialogAddProperty(oView: View, oCurrentPlant: PPlant, oBtnAddProperty: Button): void {\r\n\t\t// if (!oView.getBindingContext('plants')!.getObject().taxon_id) {\r\n\t\tif (!oCurrentPlant.taxon_id) {\r\n\t\t\tMessageToast.show('Function available after setting botanical name.');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// var oCategoryControl = evt.getSource();  // for closure\r\n\t\tvar oCategory: PPropertiesInCategory = <PPropertiesInCategory>oBtnAddProperty.getBindingContext('properties')!.getObject();\r\n\t\t// var oModelProperties = evt.getSource().getModel('properties');\r\n\t\t// var oModelPropertyNames = evt.getSource().getModel('propertyNames');\r\n\t\tvar sBindingPathProperties = oBtnAddProperty.getBindingContext('properties')!.getPath();\r\n\r\n\t\tif (oView.byId('dialogAddProperties')) {\r\n\t\t\toView.byId('dialogAddProperties').destroy();\r\n\t\t}\r\n\r\n\t\tconst oModelPropertyNames = <JSONModel>oBtnAddProperty.getModel('propertyNames');\r\n\t\tthis.applyToFragment('dialogAddProperties', (oPopover: Popover) => {\r\n\t\t\tvar oModelTemp = this._getTemporaryAvailablePropertiesModel(oCategory, oModelPropertyNames);\r\n\t\t\toPopover.setModel(oModelTemp, 'propertiesCompare');\r\n\t\t\toPopover.bindElement({\r\n\t\t\t\tpath: sBindingPathProperties,\r\n\t\t\t\tmodel: \"properties\"\r\n\t\t\t});\r\n\t\t\toPopover.openBy(oBtnAddProperty, true);\r\n\t\t});\r\n\r\n\t\toBtnAddProperty.setType('Emphasized');\r\n\r\n\t\t//remember category's button to later retype it\r\n\t\tthis._btnAdd = oBtnAddProperty;\r\n\t}\r\n\r\n\tpublic addProperty(oView: View, oSource: Button) {\r\n\t\t// add selected properties to the plant's properties\r\n\t\t// var aModelProperties = this.getView().getModel('properties');\r\n\t\tvar aPropertiesFromDialog = <TemporaryAvailableProperties[]>(<JSONModel>oSource.getModel('propertiesCompare')).getData();\r\n\t\t// var iCountBefore = evt.getSource().getBindingContext('properties').getObject().properties.length;\r\n\t\tconst oPropertiesInCategory = <PPropertiesInCategory>oSource.getBindingContext('properties')!.getObject();\r\n\t\tvar aProperties = <PProperty[]>oPropertiesInCategory.properties;\r\n\t\tvar iCategoryId = oPropertiesInCategory.category_id;\r\n\t\tvar iTaxonId = (<PPlant>oSource.getBindingContext('plants')!.getObject()).taxon_id;\r\n\t\t// aPropertiesFromDialog.forEach(function(entry) {\r\n\t\tfor (var i = 0; i < aPropertiesFromDialog.length; i++) {\r\n\t\t\tvar entry = <TemporaryAvailableProperties>aPropertiesFromDialog[i];\r\n\t\t\tif ((entry.selected_plant && !entry.blocked_plant) || (entry.selected_taxon && !entry.blocked_taxon)) {\r\n\t\t\t\t// find out if we already have that proprety name node for taxon or if we need to create it\r\n\t\t\t\tvar found = aProperties.find(ele => ele.property_name_id == entry.property_name_id);\r\n\t\t\t\tif (found) {\r\n\t\t\t\t\t// insert plant value for plant and/or taxon into existing propery values list of the property name node\r\n\t\t\t\t\tif (entry.selected_plant && !entry.blocked_plant) {\r\n\t\t\t\t\t\tfound.property_values.push(<PPropertyValue>{\r\n\t\t\t\t\t\t\t'type': 'plant',\r\n\t\t\t\t\t\t\t'property_value': ''\r\n\t\t\t\t\t\t});  // property_value_id: undefined\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (entry.selected_taxon && !entry.blocked_taxon) {\r\n\t\t\t\t\t\tvar oItem = <PPropertyValue>{\r\n\t\t\t\t\t\t\ttype: 'taxon',\r\n\t\t\t\t\t\t\tproperty_value: ''\r\n\t\t\t\t\t\t};  // property_value_id: undefined\r\n\t\t\t\t\t\tfound.property_values.push(oItem);\r\n\t\t\t\t\t\tconst oPropertiesTaxaModel = <JSONModel>oView.getModel('propertiesTaxa');\r\n\t\t\t\t\t\tthis._insertPropertyIntoPropertiesTaxaModel(oItem, iCategoryId, iTaxonId!, entry, oPropertiesTaxaModel);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// creat property name node and insert property value for plant and/or taxon\r\n\t\t\t\t\tvar aPropertyValues = <PPropertyValue[]>[];\r\n\t\t\t\t\tif (entry.selected_plant && !entry.blocked_plant) {\r\n\t\t\t\t\t\taPropertyValues.push(<PPropertyValue>{\r\n\t\t\t\t\t\t\ttype: 'plant',\r\n\t\t\t\t\t\t\tproperty_value: ''\r\n\t\t\t\t\t\t});  //, 'property_value_id': undefined \r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (entry.selected_taxon && !entry.blocked_taxon) {\r\n\t\t\t\t\t\tvar oItem_ = <PPropertyValue>{\r\n\t\t\t\t\t\t\ttype: 'taxon',\r\n\t\t\t\t\t\t\tproperty_value: ''\r\n\t\t\t\t\t\t};  //, 'property_value_id': undefined \r\n\t\t\t\t\t\taPropertyValues.push(oItem_);\r\n\t\t\t\t\t\tconst oPropertiesTaxaModel = <JSONModel>oView.getModel('propertiesTaxa');\r\n\t\t\t\t\t\tthis._insertPropertyIntoPropertiesTaxaModel(oItem_, iCategoryId, iTaxonId!, entry, oPropertiesTaxaModel);\r\n\t\t\t\t\t}\r\n\t\t\t\t\toPropertiesInCategory.properties.push(<PProperty>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t'property_name': entry.property_name,\r\n\t\t\t\t\t\t\t'property_name_id': entry.property_name_id,\r\n\t\t\t\t\t\t\t'property_values': aPropertyValues\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if (evt.getSource().getBindingContext('properties').getObject().properties.length !== iCountBefore){\r\n\t\toView.getModel('properties').refresh();\r\n\t\tthis._btnAdd.setType('Transparent');\r\n\t\tconst oPopover = <Popover>oView.byId('dialogAddProperties');\r\n\t\toPopover.close();\r\n\t\toPopover.destroy();\r\n\t}\r\n\r\n\tprivate _insertPropertyIntoPropertiesTaxaModel(oPropertyValue: PPropertyValue, iCategoryId: int, iTaxonId: int, entry: TemporaryAvailableProperties, oPropertiesTaxaModel: JSONModel) {\r\n\t\t// add a property value to taxon properties model\r\n\t\tvar aCurrentPropertyNames: PProperty[] = oPropertiesTaxaModel.getData().propertiesTaxon[iTaxonId][iCategoryId].properties;\r\n\r\n\t\t// create property name node if not exists (if we have two new property names, we need to go by name not (undefined) id)\r\n\t\tif (entry.property_name_id) {\r\n\t\t\tvar found = aCurrentPropertyNames.find(ele => ele.property_name_id == entry.property_name_id);\r\n\t\t} else {\r\n\t\t\tfound = aCurrentPropertyNames.find(ele => ele.property_name == entry.property_name);\r\n\t\t}\r\n\t\tif (!found) {\r\n\t\t\taCurrentPropertyNames.push(\r\n\t\t\t\t{\r\n\t\t\t\t\t'property_name': entry.property_name,\r\n\t\t\t\t\t'property_name_id': entry.property_name_id,\r\n\t\t\t\t\t'property_values': [oPropertyValue]\r\n\t\t\t\t});\r\n\t\t} else {\r\n\t\t\t// otherwise just insert the property value\r\n\t\t\tfound.property_values.push(oPropertyValue);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _taxon_properties_already_loaded(oOwnerComponent: Component, taxon_id: int) {\r\n\t\tif (oOwnerComponent.getModel('propertiesTaxa').getProperty('/propertiesTaxon/' + taxon_id))\r\n\t\t\treturn true;\r\n\t\telse\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\tloadPropertiesForCurrentPlant(oPlant: PPlant, oOwnerComponent: Component) {\r\n\t\t// request data from backend\r\n\t\t// data is added to local properties model and bound to current view upon receivement\r\n\t\tvar sPlantId = encodeURIComponent(oPlant.id!);\r\n\t\tvar uri = 'plant_properties/' + sPlantId;\r\n\r\n\t\t// if plant's taxon's properties have not been already loaded, load them as well\r\n\t\tif (oPlant.taxon_id && !this._taxon_properties_already_loaded(oOwnerComponent, oPlant.taxon_id))\r\n\t\t\tvar oPayload = <PlantPropertiesRequest>{ taxon_id: oPlant.taxon_id };\r\n\t\telse\r\n\t\t\toPayload = {};\r\n\r\n\t\t$.ajax({\r\n\t\t\turl: Util.getServiceUrl(uri),\r\n\t\t\tdata: oPayload,\r\n\t\t\tcontext: this,\r\n\t\t\tasync: true\r\n\t\t})\r\n\t\t\t.done(this._onReceivingPropertiesForPlant.bind(this, oPlant, oOwnerComponent))\r\n\t\t\t.fail(ModelsHelper.getInstance().onReceiveErrorGeneric.bind(this, 'Property (GET)'));\r\n\t}\r\n\r\n\tprivate _onReceivingPropertiesForPlant(oPlant: PPlant, oOwnerComponent: Component, oData: PResultsPropertiesForPlant, sStatus: ResponseStatus, oResponse: JQueryXHR) {\r\n\t\t//insert (overwrite!) properties data for current plant with data received from backend\r\n\t\tvar oPropertiesModel = oOwnerComponent.getModel('properties');\r\n\t\toPropertiesModel.setProperty('/propertiesPlants/' + oPlant.id + '/', oData.propertyCollections);\r\n\r\n\t\t//for tracking changes, save a clone\r\n\t\tif (!oOwnerComponent.oPropertiesDataClone) {\r\n\t\t\toOwnerComponent.oPropertiesDataClone = {};\r\n\t\t}\r\n\t\toOwnerComponent.oPropertiesDataClone[oPlant.id!] = Util.getClonedObject(oData.propertyCollections);\r\n\r\n\t\t// update taxon properties model\r\n\t\tif (Object.keys(oData.propertyCollectionsTaxon.categories).length > 0) {\r\n\t\t\toOwnerComponent.getModel('propertiesTaxa').setProperty('/propertiesTaxon/' + oPlant.taxon_id + '/', oData.propertyCollectionsTaxon.categories);\r\n\t\t\tif (!oOwnerComponent.oPropertiesTaxonDataClone) {\r\n\t\t\t\toOwnerComponent.oPropertiesTaxonDataClone = {};\r\n\t\t\t}\r\n\t\t\toOwnerComponent.oPropertiesTaxonDataClone[oPlant.taxon_id!] = Util.getClonedObject(oData.propertyCollectionsTaxon.categories);\r\n\t\t}\r\n\r\n\t\t// ... and redundantly insert the taxon data into the plant's properties array (only for display)\r\n\t\tthis._appendTaxonPropertiesToPlantProperties(oOwnerComponent, oPlant);\r\n\r\n\t\tMessageUtil.getInstance().addMessageFromBackend(oData.message);\r\n\r\n\t\t// somehow UI5 requires a forced refresh here in case of no plant properties data but appended taxon properties to the plant properties; maybe a bug\r\n\t\toPropertiesModel.refresh(true);\r\n\t}\r\n\r\n\tprivate _appendTaxonPropertiesToPlantProperties(oOwnerComponent: Component, oPlant: PPlant) {\r\n\t\t// called after loading plant properties or instead of loading plant properties if these have been loaded already\r\n\t\tif (!oPlant.taxon_id) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar oModelPropertiesTaxon = oOwnerComponent.getModel('propertiesTaxa');\r\n\t\tvar oModelPropertiesPlant = oOwnerComponent.getModel('properties');\r\n\t\tvar oCategoriesTaxon: CategoryToPropertiesInCategoryMap = oModelPropertiesTaxon.getProperty('/propertiesTaxon/' + oPlant.taxon_id + '/');\r\n\t\tvar aCategoriesPlant: PPropertiesInCategory[] = oModelPropertiesPlant.getProperty('/propertiesPlants/' + oPlant.id + '/categories/');\r\n\t\tconst aCategoryIds: int[] = Object.keys(oCategoriesTaxon).map(sCategoryId => parseInt(sCategoryId));\r\n\t\tfor (var i = 0; i < Object.keys(oCategoriesTaxon).length; i++) {\r\n\t\t\tvar oCategory: PPropertiesInCategory = oCategoriesTaxon[aCategoryIds[i]];\r\n\t\t\tvar category_id = oCategory.category_id;\r\n\t\t\tvar plant_category = aCategoriesPlant.find(ele => ele.category_id == category_id);\r\n\r\n\t\t\tfor (var j = 0; j < oCategory.properties.length; j++) {\r\n\t\t\t\tvar property_name = oCategory.properties[j];\r\n\t\t\t\tvar plant_property_name = plant_category!.properties.find(ele => ele.property_name_id == property_name.property_name_id);\r\n\t\t\t\tif (plant_property_name) {\r\n\t\t\t\t\tplant_property_name.property_values.push(...property_name.property_values);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tplant_category!.properties.push(property_name);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}"],"mappings":"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"}