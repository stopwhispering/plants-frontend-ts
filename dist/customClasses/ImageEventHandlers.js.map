{"version":3,"file":"ImageEventHandlers.js","names":["ImageEventHandlers","ManagedObject","constructor","applyToFragment","assignPlantToImage","oPlant","oImage","oImagesModel","aCurrentlyAssignedPlants","plants","oNewlyAssignedPlant","plant_id","id","key","plant_name","text","Util","isDictKeyInArray","MessageToast","show","push","console","log","updateBindings","assignImageToEvent","oSource","sPathCurrentImage","getBindingContext","getPath","oPopover","bindElement","path","model","openBy","assignEventToImage","oEventsModel","oPopoverAssignEventToImage","getObject","oImageAssignment","filename","oSelectedEvent","images","length","found","find","image","close","unassignImageFromEvent","sEventsBindingPath","oEventsImage","getProperty","sEventImages","substring","lastIndexOf","aEventImages","iPosition","indexOf","splice","refresh","handleTypeMissmatch","oFileUpload","sFileType","aFileTypes","getFileType","map","ele","sSupportedFileTypes","join","removeTokenFromModel","sKey","oModel","sType","aPlantTags","iIndex","findIndex","aKeywordTags","keywords","keyword","getInstance","_instance"],"sources":["../../src/customClasses/ImageEventHandlers.ts"],"sourcesContent":["import MessageToast from \"sap/m/MessageToast\"\r\nimport * as Util from \"plants/ui/customClasses/Util\";\r\nimport ManagedObject from \"sap/ui/base/ManagedObject\";\r\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\r\nimport GridListItem from \"sap/f/GridListItem\";\r\nimport { PImage, PImagePlantTag, PKeyword } from \"../definitions/image_entities\";\r\nimport { PEvent } from \"../definitions/EventsFromBackend\";\r\nimport Popover from \"sap/m/Popover\";\r\nimport Icon from \"sap/ui/core/Icon\";\r\nimport FileUploader from \"sap/ui/unified/FileUploader\";\r\nimport { PPlant } from \"../definitions/plant_entities\";\r\n\r\n\r\n/**\r\n * @namespace plants.ui.customClasses\r\n */\r\nexport default class ImageEventHandlers extends ManagedObject{\r\n\t\tprivate static _instance: ImageEventHandlers;\r\n\t\tprivate applyToFragment: Function;\r\n\t\t       \r\n        // generate or return singleton\r\n        public static getInstance(applyToFragment?: Function): ImageEventHandlers {\r\n            if (!ImageEventHandlers._instance && applyToFragment) {\r\n                ImageEventHandlers._instance = new ImageEventHandlers(applyToFragment);\r\n            }\r\n            return ImageEventHandlers._instance;\r\n        }\r\n\r\n\t\tprivate constructor(applyToFragment: Function) {\r\n\t\t\tsuper();\r\n\t\t\tthis.applyToFragment = applyToFragment;\r\n\t\t}\r\n\r\n\t\t// todo make public\r\n\t\tpublic assignPlantToImage(oPlant: PPlant, oImage: PImage, oImagesModel: JSONModel){\r\n\t\t\t//add a plant to image in images model\r\n\t\t\t//currently triggered when ...\r\n\t\t\t\t// assigning an image in untagged view to the plant in details view\r\n\t\t\t\t// assigning an image in untagged view to a plant chosen via  input suggestions\r\n\t\t\t\t// assigning an image in detail view to a plant chosen via input suggestions\r\n\t\t\tvar aCurrentlyAssignedPlants = <PImagePlantTag[]>oImage.plants;\r\n\t\t\tvar oNewlyAssignedPlant = <PImagePlantTag>{\r\n\t\t\t\tplant_id: oPlant.id,\r\n\t\t\t\tkey: oPlant.plant_name, \r\n\t\t\t\ttext: oPlant.plant_name,\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t// check if already in list\r\n\t\t\tif (Util.isDictKeyInArray(oNewlyAssignedPlant, aCurrentlyAssignedPlants)){\r\n\t\t\t\tMessageToast.show('Plant Name already assigned. ');\r\n\t\t\t\treturn false;\r\n\t\t\t} else {\r\n\t\t\t\taCurrentlyAssignedPlants.push(oNewlyAssignedPlant);\r\n\t\t\t\tconsole.log('Assigned plant to image: '+ oPlant.plant_name + ' (' + oPlant.id + ')');\r\n\t\t\t\toImagesModel.updateBindings(false);\r\n\t\t\t\treturn true;\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tpublic assignImageToEvent(oSource: Icon){\r\n\t\t\t// triggered by icon beside image; assign that image to one of the plant's events\r\n\t\t\t// generate dialog from fragment if not already instantiated\r\n\t\t\tvar sPathCurrentImage = oSource.getBindingContext(\"images\")!.getPath();\r\n\t\t\tthis.applyToFragment('dialogAssignEventToImage',(oPopover: Popover)=>{\r\n\t\t\t\t// bind the selected image's path in images model to the popover dialog\r\n\t\t\t\toPopover.bindElement({ path: sPathCurrentImage,\r\n\t\t\t\t\t   \t\t  \t\t   model: \"images\" });\t\r\n\t\t\t\toPopover.openBy(oSource, true);\t\r\n\t\t\t});\t\r\n\t\t}\r\n\t\t\r\n\t\tassignEventToImage(oSource: GridListItem, oEventsModel: JSONModel, oPopoverAssignEventToImage: Popover){\r\n\t\t\t\r\n\r\n\t\t\tconst oImage = <PImage>oSource.getBindingContext('images')!.getObject();\r\n\r\n\t\t\t// get image\r\n\t\t\tvar oImageAssignment = {\r\n\t\t\t\tfilename:      oImage.filename\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t// check if already assigned\r\n\t\t\tconst oSelectedEvent = <PEvent>oSource.getBindingContext('events')!.getObject();\r\n\t\t\tif(!!oSelectedEvent.images && oSelectedEvent.images.length > 0){\r\n\t\t\t\tvar found = oSelectedEvent.images.find(function(image) {\r\n\t\t\t\t  return image.filename === oImageAssignment.filename;\r\n\t\t\t\t});\r\n\t\t\t\tif(found){\r\n\t\t\t\t\tMessageToast.show('Event already assigned to image.');\r\n\t\t\t\t\toPopoverAssignEventToImage.close();\r\n\t\t\t\t\treturn;\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// assign\r\n\t\t\tif(!oSelectedEvent.images){\r\n\t\t\t\toSelectedEvent.images = [oImageAssignment];\r\n\t\t\t} else {\r\n\t\t\t\toSelectedEvent.images.push(oImageAssignment);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tMessageToast.show('Assigned.');\r\n\t\t\toEventsModel.updateBindings(false);\r\n\t\t\toPopoverAssignEventToImage.close();\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tpublic unassignImageFromEvent(sEventsBindingPath: string, oEventsModel: JSONModel){\r\n            // triggered by unassign control next to an image in the events list\r\n\t\t\tvar oEventsImage = oEventsModel.getProperty(sEventsBindingPath);\r\n\t\t\t\r\n\t\t\tvar sEventImages = sEventsBindingPath.substring(0,sEventsBindingPath.lastIndexOf('/'));\r\n\t\t\tvar aEventImages = oEventsModel.getProperty(sEventImages);\r\n\t\t\t\r\n\t\t\tvar iPosition = aEventImages.indexOf(oEventsImage);\r\n\t\t\tif(iPosition===-1){\r\n\t\t\t\tMessageToast.show(\"Can't find image.\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\taEventImages.splice(iPosition, 1);\r\n\t\t\toEventsModel.refresh();  //same like updateBindings(false)\t\t\t\r\n\t\t}\r\n\r\n\t\thandleTypeMissmatch(oFileUpload: FileUploader, sFileType: string){\r\n\t\t\tvar aFileTypes = oFileUpload.getFileType().map(ele => \"*.\" + ele)\r\n\t\t\tvar sSupportedFileTypes = aFileTypes.join(\", \");\r\n\t\t\tMessageToast.show(\"The file type *.\" + sFileType +\r\n\t\t\t\t\t\t\t\t\t\" is not supported. Choose one of the following types: \" +\r\n\t\t\t\t\t\t\t\t\tsSupportedFileTypes);\r\n\t\t}\r\n\r\n\t\tpublic removeTokenFromModel(sKey: string, oImage: PImage, oModel: JSONModel, sType: 'plant'|'keyword'){\r\n\t\t\t// triggered upon changes of image's plant assignments and image's keywords\r\n\t\t\t// either in untagged view or in detail view\r\n\t\t\t// sKey is either a keyword or a plant name\r\n\t\t\t// note: the token itself has already been deleted; here, we only delete the \r\n\t\t\t// \t\t corresponding entry from the model\r\n\t\t\t\r\n\t\t\t// find plant/keyword in the image's corresponding array and delete\r\n\t\t\tif (sType === 'plant'){\r\n\t\t\t\tconst aPlantTags = <PImagePlantTag[]>oImage.plants;\r\n\t\t\t\tconst iIndex: int = aPlantTags.findIndex(ele=>ele.key === sKey);\r\n\t\t\t\taPlantTags.splice(iIndex, 1);\r\n\t\t\t} else { //'keyword'\r\n\t\t\t\tconst aKeywordTags = <PKeyword[]>oImage.keywords;\r\n\t\t\t\tconst iIndex: int = aKeywordTags.findIndex(ele=>ele.keyword === sKey);\r\n\t\t\t\taKeywordTags.splice(iIndex, 1);\r\n\t\t\t}\r\n\t\t\toModel.updateBindings(false);\r\n\t\t}\r\n}"],"mappings":"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"}