{"version":3,"file":"Component.js","names":["ModelsHelper","MessageUtil","Navigation","LayoutType","Component","UIComponent","imagesRegistry","imagesRegistryClone","imagesPlantsLoaded","Set","oEventsDataClone","oPropertiesDataClone","oPlantsDataClone","oTaxonDataClone","oPropertiesTaxonDataClone","metadata","manifest","init","setModel","models","createDeviceModel","getInstance","oPlantsModel","JSONModel","setSizeLimit","oImagesModel","oUntaggedImagesModel","oTaxonModel","oProposalKeywordsModel","oEventsModel","setProperty","oPropertiesModel","oPropertiesTaxonModel","oModelsHelper","reloadPlantsFromBackend","reloadTaxaFromBackend","reloadKeywordProposalsFromBackend","reloadNurserySourceProposalsFromBackend","reloadPropertyNamesFromBackend","oSettingsModel","preview_image","getRouter","initialize","_requestUntaggedImages","$","ajax","url","Util","getServiceUrl","context","async","done","_onReceivingUntaggedImages","fail","onReceiveErrorGeneric","bind","oData","sStatus","oReturnData","_addPhotosToRegistry","ImagesCollection","resetUntaggedPhotos","aImages","forEach","image","filename","getClonedObject","aPhotoValues","Object","entries","filter","t","plants","length","aPhotos","map","p","getModel","getHelper","oRootControl","getRootControl","oFlexibleColumnLayout","byId","oParams","UriParameters","fromQuery","oSettings","defaultTwoColumnLayoutType","TwoColumnsMidExpanded","defaultThreeColumnLayoutType","ThreeColumnsMidExpanded","mode","get","initialColumnsCount","maxColumnsCount","FlexibleColumnLayoutSemanticHelper","getInstanceFor","sModelName"],"sources":["../src/Component.ts"],"sourcesContent":["import UIComponent from \"sap/ui/core/UIComponent\"\r\nimport * as models from \"plants/ui/model/models\"\r\nimport JSONModel from \"sap/ui/model/json/JSONModel\"\r\nimport FlexibleColumnLayoutSemanticHelper from \"sap/f/FlexibleColumnLayoutSemanticHelper\"\r\nimport ModelsHelper from \"plants/ui/model/ModelsHelper\"\r\nimport MessageUtil from \"plants/ui/customClasses/MessageUtil\"\r\nimport * as Util from \"plants/ui/customClasses/Util\";\r\nimport {\r\n\tLTaxonData } from \"./definitions/TaxonLocal\"\r\nimport Navigation from \"./customClasses/Navigation\"\r\nimport { PImage, PResultsImageResource } from \"./definitions/ImageFromBackend\"\r\nimport { LImageMap } from \"./definitions/ImageLocal\"\r\nimport UriParameters from \"sap/base/util/UriParameters\"\r\nimport View from \"sap/ui/core/mvc/View\"\r\nimport { LayoutType } from \"sap/f/library\"\r\nimport FlexibleColumnLayout from \"sap/f/FlexibleColumnLayout\"\r\nimport { LCategoryToPropertiesInCategoryMap, LPlantIdToPropertyCollectionMap } from \"./definitions/PropertiesLocal\"\r\nimport { PlantIdToEventsMap } from \"./definitions/EventsLocal\"\r\nimport { PPlantsUpdateRequest } from \"./definitions/PlantsFromBackend\"\r\n\r\n/**\r\n * @namespace plants.ui\r\n */\r\nexport default class Component extends UIComponent {\r\n\r\n\tpublic imagesRegistry: LImageMap = {};\r\n\tpublic imagesRegistryClone: LImageMap = {};\r\n\tpublic imagesPlantsLoaded = new Set();\r\n\tpublic oEventsDataClone = <PlantIdToEventsMap>{};  // avoid exceptions when saving before any event has been loaded\r\n\tpublic oPropertiesDataClone: LPlantIdToPropertyCollectionMap = {};\r\n\tpublic oPlantsDataClone = <PPlantsUpdateRequest>{};\r\n\tpublic oTaxonDataClone = <LTaxonData>{};\r\n\tpublic oPropertiesTaxonDataClone = <LCategoryToPropertiesInCategoryMap>{};\r\n\r\n\tpublic static metadata = {\r\n\t\tmanifest: \"json\"\r\n\t}\r\n\r\n\tpublic init() : void {\r\n\t\t// call the base component's init function\r\n\t\tsuper.init();\r\n\t\t// set the device model\r\n\t\tthis.setModel(models.createDeviceModel(), \"device\");\r\n\t\t\r\n\t\t// instantiate message utility class and supply this component as context\r\n\t\tMessageUtil.getInstance(this);\r\n\t\t\r\n\t\t// instantiate navigation class and supply this component as context\r\n\t\tNavigation.getInstance(this);\r\n\r\n\t\t// instantiate empty models and name them\r\n\t\t//they are filled in the helper class\r\n\t\tvar oPlantsModel = new JSONModel();\r\n\t\toPlantsModel.setSizeLimit(2000);\r\n\t\tthis.setModel(oPlantsModel, 'plants');\r\n\t\t\r\n\t\tvar oImagesModel = new JSONModel();\r\n\t\toImagesModel.setSizeLimit(50000);\r\n\t\tthis.setModel(oImagesModel, 'images');\r\n\t\t\r\n\t\tvar oUntaggedImagesModel = new JSONModel();\r\n\t\toUntaggedImagesModel.setSizeLimit(250);\r\n\t\tthis.setModel(oUntaggedImagesModel, 'untaggedImages');\r\n\r\n\t\tvar oTaxonModel = new JSONModel();\r\n\t\toTaxonModel.setSizeLimit(2000);\r\n\t\tthis.setModel(oTaxonModel, 'taxon');\r\n\t\t\r\n\t\tvar oProposalKeywordsModel = new JSONModel();\r\n\t\toTaxonModel.setSizeLimit(2000);\r\n\t\tthis.setModel(oProposalKeywordsModel, 'keywords');\r\n\r\n\t\t// empty model for filter values (filled upon opening filter dialog)\r\n\t\tthis.setModel(new JSONModel(), 'filterValues');\r\n\t\t\r\n\t\t// the events model is a special one insofar as we don't load\r\n\t\t// it initially but only in part as we enter a plant's details site\r\n\t\tvar oEventsModel = new JSONModel(); \r\n\t\toEventsModel.setProperty('/PlantsEventsDict', {}); // plant ids will be keys of that dict\r\n\t\tthis.setModel(oEventsModel, 'events');\r\n\t\t\r\n\t\tvar oPropertiesModel = new JSONModel();\r\n\t\toPropertiesModel.setProperty('/propertiesPlants', {}); // plant ids will be keys of that dict\r\n\t\tthis.setModel(oPropertiesModel, 'properties');\r\n\t\t\r\n\t\tconst oPropertiesTaxonModel = new JSONModel();\r\n\t\toPropertiesTaxonModel.setProperty('/propertiesTaxon', {}); // taxon_id will be keys of that dict\r\n\t\tthis.setModel(oPropertiesTaxonModel, 'propertiesTaxa');\r\n\r\n\t\t//use helper class to load data into json models\r\n\t\t//(helper class is used to reload data via button as well)\r\n\t\tvar oModelsHelper = ModelsHelper.getInstance(this);\r\n\t\toModelsHelper.reloadPlantsFromBackend();\r\n\t\toModelsHelper.reloadTaxaFromBackend();\r\n\t\toModelsHelper.reloadKeywordProposalsFromBackend();\r\n\t\toModelsHelper.reloadNurserySourceProposalsFromBackend();\r\n\t\toModelsHelper.reloadPropertyNamesFromBackend();\r\n\r\n\t\t// settings model\r\n\t\tvar oSettingsModel = new JSONModel({preview_image: 'favourite_image'});\r\n\t\tthis.setModel(oSettingsModel, 'status');\r\n\r\n\t\t//initialize router\r\n\t\tthis.setModel(new JSONModel());\t //contains the layout\t\r\n\t\tthis.getRouter().initialize();\r\n\r\n\t\tthis._requestUntaggedImages();\t\t\r\n\t}\r\n\r\n\tprivate _requestUntaggedImages(){\r\n\t\t// request data from backend\r\n\t\t$.ajax({\r\n\t\t\turl: Util.getServiceUrl('images/untagged/'),\r\n\t\t\t// data: {untagged: true},\r\n\t\t\tcontext: this,\r\n\t\t\tasync: true\r\n\t\t})\r\n\t\t// .done(this._onReceivingUntaggedImages.bind(this))\r\n\t\t.done(this._onReceivingUntaggedImages)\r\n\t\t.fail(ModelsHelper.getInstance().onReceiveErrorGeneric.bind(this,'Plant Untagged Images (GET)'));\t\r\n\t}\r\n\r\n\t// load untagged images to display number as badge in top row\r\n\tprivate _onReceivingUntaggedImages(oData: PResultsImageResource, sStatus: any, oReturnData: any){\r\n\t\tthis._addPhotosToRegistry(oData.ImagesCollection);\r\n\t\tthis.resetUntaggedPhotos();\r\n\t}\r\n\r\n\tprivate _addPhotosToRegistry(aImages: PImage[]){\r\n\t\t// add photos loaded for a plant to the registry if not already loaded with other plant\r\n\t\t// plus add a copy of the photo to a clone registry for getting changed photos when saving \r\n\t\taImages.forEach((image: PImage) => {\r\n\t\t\tif (!(image.filename in this.imagesRegistry)){\r\n\t\t\t\tthis.imagesRegistry[image.filename] = image;\r\n\t\t\t\tthis.imagesRegistryClone[image.filename] = Util.getClonedObject(image);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpublic resetUntaggedPhotos(){\r\n\t\t//(re-)set untagged photos in untagged model\r\n\t\t// @ts-ignore // works, but typescript doesn't like it\r\n\t\tconst aPhotoValues = <any[][]> Object.entries(this.imagesRegistry).filter(t => (!t[1].plants.length));\r\n\t\tvar aPhotos = aPhotoValues.map(p => p[1]);\r\n\t\tthis.getModel('untaggedImages').setProperty('/ImagesCollection',aPhotos);\r\n\t}\r\n\t\r\n\t// although root view is defined in manifest, somehow the \r\n\t// BeforeRouteMatched event handler is not triggered without redefining\r\n\t// createContent (no idea, why...; probably because default is async)\r\n\t// public createContent () {\r\n\t// \t// return sap.ui.view({\r\n\t// \treturn sap.ui.view({\r\n\t// \t\tviewName: \"plants.ui.view.FlexibleColumnLayout\",\r\n\t// \t\ttype: \"XML\",\r\n\t// \t\t// async: true  //=> no direct entry into plant page possible\r\n\t// \t});\r\n\t// }\r\n\t\r\n\t/**\r\n\t * Returns an instance of the semantic helper\r\n\t * @returns {sap.f.FlexibleColumnLayoutSemanticHelper} An instance of the semantic helper\r\n\t */\r\n\tpublic getHelper() {\r\n\t\tconst oRootControl = <View>this.getRootControl();\r\n\t\tconst oFlexibleColumnLayout = <FlexibleColumnLayout> oRootControl.byId(\"idFlexibleColumnLayout\");\r\n\t\tconst oParams = UriParameters.fromQuery();\r\n\t\t// const oParams = jQuery.sap.getUriParameters();\r\n\t\tconst oSettings = {\r\n\t\t\t\tdefaultTwoColumnLayoutType: LayoutType.TwoColumnsMidExpanded,\r\n\t\t\t\t// defaultTwoColumnLayoutType: sap.f.LayoutType.TwoColumnsMidExpanded,\r\n\t\t\t\tdefaultThreeColumnLayoutType: LayoutType.ThreeColumnsMidExpanded,\r\n\t\t\t\t// defaultThreeColumnLayoutType: sap.f.LayoutType.ThreeColumnsMidExpanded,\r\n\t\t\t\tmode: oParams.get(\"mode\"),\r\n\t\t\t\tinitialColumnsCount: oParams.get(\"initial\"),\r\n\t\t\t\tmaxColumnsCount: oParams.get(\"max\")\r\n\t\t\t};\r\n\r\n\t\treturn FlexibleColumnLayoutSemanticHelper.getInstanceFor(oFlexibleColumnLayout, oSettings);\r\n\t}\r\n\r\n\tpublic getModel(sModelName?: string): JSONModel{\r\n\t\t// override Component's getModel for type hint JSONModel instead of abstract model\r\n\t\treturn <JSONModel> super.getModel(sModelName);\r\n\t  }\r\n\r\n}"],"mappings":"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"}